/* c:/program files/mortice kern systems/lex and yacc\mksnt\yacc -o C:\tmp\test\htoinc\ytab.cpp -LC -D C:\tmp\test\htoinc\ytab.hpp cgrammer.y */
#line 1 "cgrammer.y"


#define YYDEBUG	1
#define YYERROR_VERBOSE	1
yydebug = 1;
#define DISPLAY_PROD	1



#include "symboltable.h"
#include "myParser.h"

extern myParser *parser;

void DisplayProd(string cs);
/*
void SetTypeName(symbl *sym);
*/
void SetTypeName(YYSTYPE sym);
void UpdateTypeNames(YYSTYPE tok);
void AddIdToList(YYSTYPE sym);
void ClrIdList(void);
YYSTYPE GetSymbol(YYSTYPE tok);
void DisplayLexeme(YYSTYPE sym);

YYSTYPE	lastSym;

/*
This grammar 
*/


#ifndef YYSTYPE
#define YYSTYPE int
#endif
extern YYSTYPE yylval;
#if YYDEBUG
yyTypedRules yyRules[] = {
	{ "&00: %01 &00",  0},
	{ "%02: &02",  0},
	{ "%02: &04",  0},
	{ "%02: &05",  0},
	{ "%02: &67 %03 &68",  0},
	{ "%04: %02",  0},
	{ "%04: %04 &69 %03 &70",  0},
	{ "%04: %04 &67 &68",  0},
	{ "%04: %04 &67 %05 &68",  0},
	{ "%04: %04 &71 &02",  0},
	{ "%04: %04 &07 &02",  0},
	{ "%04: %04 &08",  0},
	{ "%04: %04 &09",  0},
	{ "%04: &67 %06 &68 &72 %07 &73",  0},
	{ "%04: &67 %06 &68 &72 %07 &74 &73",  0},
	{ "%05: %08",  0},
	{ "%05: %05 &74 %08",  0},
	{ "%09: %04",  0},
	{ "%09: &08 %09",  0},
	{ "%09: &09 %09",  0},
	{ "%09: %10 %11",  0},
	{ "%09: &06 %09",  0},
	{ "%09: &06 &67 %06 &68",  0},
	{ "%10: &75",  0},
	{ "%10: &76",  0},
	{ "%10: &77",  0},
	{ "%10: &78",  0},
	{ "%10: &79",  0},
	{ "%10: &80",  0},
	{ "%11: %09",  0},
	{ "%11: &67 %06 &68 %11",  0},
	{ "%12: %11",  0},
	{ "%12: %12 &76 %11",  0},
	{ "%12: %12 &81 %11",  0},
	{ "%12: %12 &82 %11",  0},
	{ "%13: %12",  0},
	{ "%13: %13 &77 %12",  0},
	{ "%13: %13 &78 %12",  0},
	{ "%14: %13",  0},
	{ "%14: %14 &10 %13",  0},
	{ "%14: %14 &11 %13",  0},
	{ "%15: %14",  0},
	{ "%15: %15 &83 %14",  0},
	{ "%15: %15 &84 %14",  0},
	{ "%15: %15 &12 %14",  0},
	{ "%15: %15 &13 %14",  0},
	{ "%16: %15",  0},
	{ "%16: %16 &14 %15",  0},
	{ "%16: %16 &15 %15",  0},
	{ "%17: %16",  0},
	{ "%17: %17 &75 %16",  0},
	{ "%18: %17",  0},
	{ "%18: %18 &85 %17",  0},
	{ "%19: %18",  0},
	{ "%19: %19 &86 %18",  0},
	{ "%20: %19",  0},
	{ "%20: %20 &16 %19",  0},
	{ "%21: %20",  0},
	{ "%21: %21 &17 %20",  0},
	{ "%22: %21",  0},
	{ "%22: %21 &87 %03 &88 %22",  0},
	{ "%08: %22",  0},
	{ "%08: %09 %23 %08",  0},
	{ "%23: &89",  0},
	{ "%23: &18",  0},
	{ "%23: &19",  0},
	{ "%23: &20",  0},
	{ "%23: &21",  0},
	{ "%23: &22",  0},
	{ "%23: &23",  0},
	{ "%23: &24",  0},
	{ "%23: &25",  0},
	{ "%23: &26",  0},
	{ "%23: &27",  0},
	{ "%03: %08",  0},
	{ "%03: %03 &74 %08",  0},
	{ "%24: %22",  0},
	{ "%25: %26 &90",  0},
	{ "%25: %26 %27 &90",  0},
	{ "%25: %26 %28 &90",  0},
	{ "%25: %26 %27 %28 &90",  0},
	{ "%26: %29",  0},
	{ "%26: %29 %26",  0},
	{ "%26: %30",  0},
	{ "%26: %30 %26",  0},
	{ "%26: %31",  0},
	{ "%26: %31 %26",  0},
	{ "%26: %32",  0},
	{ "%26: %32 %26",  0},
	{ "%27: %33",  0},
	{ "%27: %27 &74 %33",  0},
	{ "%33: %34",  0},
	{ "%33: %34 &89 %35",  0},
	{ "%29: &29",  0},
	{ "%29: &30",  0},
	{ "%29: &31",  0},
	{ "%29: &32",  0},
	{ "%29: &33",  0},
	{ "%30: &46",  0},
	{ "%30: &36",  0},
	{ "%30: &37",  0},
	{ "%30: &38",  0},
	{ "%30: &39",  0},
	{ "%30: &42",  0},
	{ "%30: &43",  0},
	{ "%30: &40",  0},
	{ "%30: &41",  0},
	{ "%30: &47",  0},
	{ "%30: &48",  0},
	{ "%30: &49",  0},
	{ "%30: %36",  0},
	{ "%30: %37",  0},
	{ "%30: &28",  0},
	{ "%36: %38 &02 &72 %39 &73",  0},
	{ "%36: %38 &72 %39 &73",  0},
	{ "%36: %38 &02",  0},
	{ "%28: %40 &67 %02 &68",  0},
	{ "%40: &03",  0},
	{ "%38: &50",  0},
	{ "%38: &51",  0},
	{ "%39: %41",  0},
	{ "%39: %39 %41",  0},
	{ "%39: %42",  0},
	{ "%39: %39 %42",  0},
	{ "%42: %43 &90",  0},
	{ "%41: %43 %44 &90",  0},
	{ "%43: %30 %43",  0},
	{ "%43: %30",  0},
	{ "%43: %31 %43",  0},
	{ "%43: %31",  0},
	{ "%44: %45",  0},
	{ "%44: %44 &74 %45",  0},
	{ "%45: %34",  0},
	{ "%45: &88 %24",  0},
	{ "%45: %34 &88 %24",  0},
	{ "%37: &52 &72 %46 &73",  0},
	{ "%37: &52 &02 &72 %46 &73",  0},
	{ "%37: &52 &72 %46 &74 &73",  0},
	{ "%37: &52 &02 &72 %46 &74 &73",  0},
	{ "%37: &52 &02",  0},
	{ "%46: %47",  0},
	{ "%46: %46 &74 %47",  0},
	{ "%47: &02",  0},
	{ "%47: &02 &89 %24",  0},
	{ "%31: &44",  0},
	{ "%31: &35",  0},
	{ "%31: &45",  0},
	{ "%32: &34",  0},
	{ "%34: %48 %49",  0},
	{ "%34: %49",  0},
	{ "%49: &02",  0},
	{ "%49: &67 %34 &68",  0},
	{ "%49: %49 &69 %50 %08 &70",  0},
	{ "%49: %49 &69 %50 &70",  0},
	{ "%49: %49 &69 %08 &70",  0},
	{ "%49: %49 &69 &31 %50 %08 &70",  0},
	{ "%49: %49 &69 %50 &31 %08 &70",  0},
	{ "%49: %49 &69 %50 &76 &70",  0},
	{ "%49: %49 &69 &76 &70",  0},
	{ "%49: %49 &69 &70",  0},
	{ "%49: %49 &67 %51 &68",  0},
	{ "%49: %49 &67 %52 &68",  0},
	{ "%49: %49 &67 &68",  0},
	{ "%48: &76",  0},
	{ "%48: &76 %50",  0},
	{ "%48: &76 %48",  0},
	{ "%48: &76 %50 %48",  0},
	{ "%50: %31",  0},
	{ "%50: %50 %31",  0},
	{ "%51: %53",  0},
	{ "%51: %53 &74 &53",  0},
	{ "%53: %54",  0},
	{ "%53: %53 &74 %54",  0},
	{ "%54: %26 %34",  0},
	{ "%54: %26 %55",  0},
	{ "%54: %26",  0},
	{ "%52: &02",  0},
	{ "%52: %52 &74 &02",  0},
	{ "%06: %43",  0},
	{ "%06: %43 %55",  0},
	{ "%55: %48",  0},
	{ "%55: %56",  0},
	{ "%55: %48 %56",  0},
	{ "%56: &67 %55 &68",  0},
	{ "%56: &69 &70",  0},
	{ "%56: &69 %08 &70",  0},
	{ "%56: %56 &69 &70",  0},
	{ "%56: %56 &69 %08 &70",  0},
	{ "%56: &69 &76 &70",  0},
	{ "%56: %56 &69 &76 &70",  0},
	{ "%56: &67 &68",  0},
	{ "%56: &67 %51 &68",  0},
	{ "%56: %56 &67 &68",  0},
	{ "%56: %56 &67 %51 &68",  0},
	{ "%35: %08",  0},
	{ "%35: &72 %07 &73",  0},
	{ "%35: &72 %07 &74 &73",  0},
	{ "%07: %35",  0},
	{ "%07: %57 %35",  0},
	{ "%07: %07 &74 %35",  0},
	{ "%07: %07 &74 %57 %35",  0},
	{ "%57: %58 &89",  0},
	{ "%58: %59",  0},
	{ "%58: %58 %59",  0},
	{ "%59: &69 %24 &70",  0},
	{ "%59: &71 &02",  0},
	{ "%60: %61",  0},
	{ "%60: %62",  0},
	{ "%60: %63",  0},
	{ "%60: %64",  0},
	{ "%60: %65",  0},
	{ "%60: %66",  0},
	{ "%61: &02 &88 %60",  0},
	{ "%61: &54 %24 &88 %60",  0},
	{ "%61: &55 &88 %60",  0},
	{ "%62: &72 &73",  0},
	{ "%62: &72 %67 &73",  0},
	{ "%67: %68",  0},
	{ "%67: %67 %68",  0},
	{ "%68: %25",  0},
	{ "%68: %60",  0},
	{ "%63: &90",  0},
	{ "%63: %03 &90",  0},
	{ "%64: &56 &67 %03 &68 %60",  0},
	{ "%64: &56 &67 %03 &68 %60 &57 %60",  0},
	{ "%64: &58 &67 %03 &68 %60",  0},
	{ "%65: &59 &67 %03 &68 %60",  0},
	{ "%65: &60 %60 &59 &67 %03 &68 &90",  0},
	{ "%65: &61 &67 %63 %63 &68 %60",  0},
	{ "%65: &61 &67 %63 %63 %03 &68 %60",  0},
	{ "%65: &61 &67 %25 %63 &68 %60",  0},
	{ "%65: &61 &67 %25 %63 %03 &68 %60",  0},
	{ "%66: &62 &02 &90",  0},
	{ "%66: &63 &90",  0},
	{ "%66: &64 &90",  0},
	{ "%66: &65 &90",  0},
	{ "%66: &65 %03 &90",  0},
	{ "%01: %69",  0},
	{ "%01: %01 %69",  0},
	{ "%69: %70",  0},
	{ "%69: %25",  0},
	{ "%70: %26 %34 %71 %62",  0},
	{ "%70: %26 %34 %62",  0},
	{ "%71: %25",  0},
	{ "%71: %71 %25",  0},
{ "$accept",  0},{ "error",  0}
};
yyNamedType yyTokenTypes[] = {
	{ "$end",  0,  0},
	{ "error",  256,  0},
	{ "IDENTIFIER",  257,  0},
	{ "ATTRIBUTE",  258,  0},
	{ "CONSTANT",  259,  0},
	{ "STRING_LITERAL",  260,  0},
	{ "SIZEOF",  261,  0},
	{ "PTR_OP",  262,  0},
	{ "INC_OP",  263,  0},
	{ "DEC_OP",  264,  0},
	{ "LEFT_OP",  265,  0},
	{ "RIGHT_OP",  266,  0},
	{ "LE_OP",  267,  0},
	{ "GE_OP",  268,  0},
	{ "EQ_OP",  269,  0},
	{ "NE_OP",  270,  0},
	{ "AND_OP",  271,  0},
	{ "OR_OP",  272,  0},
	{ "MUL_ASSIGN",  273,  0},
	{ "DIV_ASSIGN",  274,  0},
	{ "MOD_ASSIGN",  275,  0},
	{ "ADD_ASSIGN",  276,  0},
	{ "SUB_ASSIGN",  277,  0},
	{ "LEFT_ASSIGN",  278,  0},
	{ "RIGHT_ASSIGN",  279,  0},
	{ "AND_ASSIGN",  280,  0},
	{ "XOR_ASSIGN",  281,  0},
	{ "OR_ASSIGN",  282,  0},
	{ "TYPE_NAME",  283,  0},
	{ "TYPEDEF",  284,  0},
	{ "EXTERN",  285,  0},
	{ "STATIC",  286,  0},
	{ "AUTO",  287,  0},
	{ "REGISTER",  288,  0},
	{ "INLINE",  289,  0},
	{ "RESTRICT",  290,  0},
	{ "CHAR",  291,  0},
	{ "SHORT",  292,  0},
	{ "INT",  293,  0},
	{ "LONG",  294,  0},
	{ "SIGNED",  295,  0},
	{ "UNSIGNED",  296,  0},
	{ "FLOAT",  297,  0},
	{ "DOUBLE",  298,  0},
	{ "CONST",  299,  0},
	{ "VOLATILE",  300,  0},
	{ "VOID",  301,  0},
	{ "BOOL",  302,  0},
	{ "COMPLEX",  303,  0},
	{ "IMAGINARY",  304,  0},
	{ "STRUCT",  305,  0},
	{ "UNION",  306,  0},
	{ "ENUM",  307,  0},
	{ "ELLIPSIS",  308,  0},
	{ "CASE",  309,  0},
	{ "DEFAULT",  310,  0},
	{ "IF",  311,  0},
	{ "ELSE",  312,  0},
	{ "SWITCH",  313,  0},
	{ "WHILE",  314,  0},
	{ "DO",  315,  0},
	{ "FOR",  316,  0},
	{ "GOTO",  317,  0},
	{ "CONTINUE",  318,  0},
	{ "BREAK",  319,  0},
	{ "RETURN",  320,  0},
	{ "UNION_STRUCT",  321,  0},
	{ "'('",  40,  0},
	{ "')'",  41,  0},
	{ "'['",  91,  0},
	{ "']'",  93,  0},
	{ "'.'",  46,  0},
	{ "'{'",  123,  0},
	{ "'}'",  125,  0},
	{ "','",  44,  0},
	{ "'&'",  38,  0},
	{ "'*'",  42,  0},
	{ "'+'",  43,  0},
	{ "'-'",  45,  0},
	{ "'~'",  126,  0},
	{ "'!'",  33,  0},
	{ "'/'",  47,  0},
	{ "'%'",  37,  0},
	{ "'<'",  60,  0},
	{ "'>'",  62,  0},
	{ "'^'",  94,  0},
	{ "'|'",  124,  0},
	{ "'?'",  63,  0},
	{ "':'",  58,  0},
	{ "'='",  61,  0},
	{ "';'",  59,  0}

};
#endif
static int yydef[] = {

	      33,       32,       31,       30,       -1,       39,       35,       43,       42,       34, 
	      40,       37,       36,       44,       41,       38,       46,       45,       29,       27, 
	      25,       23,       21,       19,       16,       11,        8,        5,      220,      225, 
	       3,      246,       34,       49,       48,      225,       47,      225,       50,       28, 
	      26,       24,       22,       20,       18,       17,       15,       14,       13,       12, 
	      10,        9,        7,        6,       48,      225,        4,   51
};
static int yyex[] = {

	       0,        0,       -1,    1
};
static int yyact[] = {

	    -333,     -352,     -351,     -350,     -349,     -348,     -304,     -306,     -346,     -345, 
	    -344,     -343,     -340,     -339,     -342,     -341,     -307,     -305,     -347,     -338, 
	    -337,     -336,     -328,     -327,     -216,      307,      306,      305,      304,      303, 
	     302,      301,      300,      299,      298,      297,      296,      295,      294,      293, 
	     292,      291,      290,      289,      288,      287,      286,      285,      284,      283, 
	    -213,       -6,      257,      123,     -212,       -7,      257,      123,     -211,       -8, 
	    -363,     -303,     -329,      258,      257,       59,       42,       40,     -206,      123, 
	     -11,      257,     -333,     -306,     -346,     -345,     -344,     -343,     -340,     -339, 
	    -342,     -341,     -307,     -305,     -347,     -338,     -337,     -336,     -328,     -327, 
	    -216,      307,      306,      305,      304,      303,      302,      301,      300,      299, 
	     298,      297,      296,      295,      294,      293,      292,      291,      290,      283, 
	    -202,      123,       -8,     -306,     -307,     -305,      300,      299,      290,       42, 
	    -211,       -8,     -303,      257,       42,       40,     -200,     -199,       91,       40, 
	    -211,     -303,      257,       40,     -198,       40,     -195,     -196,     -333,     -352, 
	    -351,     -350,     -349,     -348,     -304,     -306,     -346,     -345,     -344,     -343, 
	    -340,     -339,     -342,     -341,     -307,     -305,     -347,     -338,     -337,     -336, 
	    -328,     -327,     -216,      307,      306,      305,      304,      303,      302,      301, 
	     300,      299,      298,      297,      296,      295,      294,      293,      292,      291, 
	     290,      289,      288,      287,      286,      285,      284,      283,      123,       61, 
	    -361,       59,     -193,     -362,     -329,      258,       59,       44,     -190,       61, 
	    -189,     -314,      125,       44,     -211,       -8,     -188,     -322,     -303,      257, 
	      59,       58,       42,       40,     -331,     -333,     -306,     -346,     -345,     -344, 
	    -343,     -340,     -339,     -342,     -341,     -307,     -305,     -347,     -338,     -337, 
	    -336,     -328,     -327,     -216,      307,      306,      305,      304,      303,      302, 
	     301,      300,      299,      298,      297,      296,      295,      294,      293,      292, 
	     291,      290,      283,      125,     -302,       41,     -291,     -281,     -333,     -352, 
	    -351,     -350,     -349,     -348,     -304,     -306,     -346,     -345,     -344,     -343, 
	    -340,     -339,     -342,     -341,     -307,     -305,     -347,     -338,     -337,     -336, 
	    -328,     -327,     -216,      307,      306,      305,      304,      303,      302,      301, 
	     300,      299,      298,      297,      296,      295,      294,      293,      292,      291, 
	     290,      289,      288,      287,      286,      285,      284,      283,      257,       41, 
	    -387,     -392,     -176,      -30,     -390,     -389,     -294,     -388,     -412,     -411, 
	    -410,     -180,     -177,     -178,     -183,     -306,     -307,     -305,      300,      299, 
	     290,      286,      264,      263,      261,      260,      259,      257,      126,       93, 
	      45,       43,       42,       40,       38,       33,     -174,     -412,     -411,     -410, 
	     260,      259,      257,       40,     -196,     -333,     -352,     -351,     -350,     -349, 
	    -348,     -304,     -306,     -346,     -345,     -344,     -343,     -340,     -339,     -342, 
	    -341,     -307,     -305,     -347,     -338,     -337,     -336,     -328,     -327,     -216, 
	     307,      306,      305,      304,      303,      302,      301,      300,      299,      298, 
	     297,      296,      295,      294,      293,      292,      291,      290,      289,      288, 
	     287,      286,      285,      284,      283,      123,     -387,     -392,     -176,     -391, 
	    -390,     -389,     -240,     -196,     -246,     -388,      -32,     -411,     -410,     -180, 
	    -177,     -178,     -333,     -352,     -351,     -350,     -349,     -348,     -304,     -306, 
	    -346,     -345,     -344,     -343,     -340,     -339,     -342,     -341,     -307,     -305, 
	    -347,     -338,     -337,     -336,     -328,     -327,     -216,     -162,     -163,     -165, 
	    -166,     -167,     -168,     -169,     -170,     -171,     -172,     -173,      320,      319, 
	     318,      317,      316,      315,      314,      313,      311,      310,      309,      307, 
	     306,      305,      304,      303,      302,      301,      300,      299,      298,      297, 
	     296,      295,      294,      293,      292,      291,      290,      289,      288,      287, 
	     286,      285,      284,      283,      264,      263,      261,      260,      259,      257, 
	     126,      125,      123,       59,       45,       43,       42,       40,       38,       33, 
	    -387,     -392,     -176,     -391,     -390,     -389,     -160,     -388,     -412,     -411, 
	    -410,     -180,     -177,     -178,      264,      263,      261,      260,      259,      257, 
	     126,      123,       45,       43,       42,       40,       38,       33,     -360,       59, 
	    -159,     -313,      125,       44,     -387,     -392,     -176,     -391,     -390,     -389, 
	    -388,     -412,     -411,     -410,     -180,     -177,     -178,      264,      263,      261, 
	     260,      259,      257,      126,       45,       43,       42,       40,       38,       33, 
	    -312,      -11,      257,      125,     -158,       58,     -157,     -321,       59,       44, 
	    -332,     -333,     -306,     -346,     -345,     -344,     -343,     -340,     -339,     -342, 
	    -341,     -307,     -305,     -347,     -338,     -337,     -336,     -328,     -327,     -216, 
	     307,      306,      305,      304,      303,      302,      301,      300,      299,      298, 
	     297,      296,      295,      294,      293,      292,      291,      290,      283,      125, 
	    -155,       -8,     -156,     -303,      257,       91,       42,       40,     -154,       44, 
	    -292,     -153,       44,       41,     -293,       41,     -306,     -307,     -305,      300, 
	     299,      290,     -299,       93,     -387,     -392,     -176,      -36,     -390,     -389, 
	    -300,     -388,     -412,     -411,     -410,     -180,     -177,     -178,     -151,     -306, 
	    -307,     -305,      300,      299,      290,      286,      264,      263,      261,      260, 
	     259,      257,      126,       93,       45,       43,       42,       40,       38,       33, 
	    -149,     -148,      272,       63,     -147,      271,     -146,      124,     -145,       94, 
	    -144,       38,     -142,     -143,      270,      269,     -138,     -139,     -140,     -141, 
	     268,      267,       62,       60,     -136,     -137,      266,      265,     -134,     -135, 
	      45,       43,     -133,     -131,     -132,       47,       42,       37,     -377,     -376, 
	    -375,     -374,     -373,     -372,     -371,     -370,     -369,     -368,     -367,      282, 
	     281,      280,      279,      278,      277,      276,      275,      274,      273,       61, 
	    -295,       93,     -387,     -392,     -129,     -391,     -390,     -389,     -388,     -412, 
	    -411,     -410,     -180,     -177,     -178,      264,      263,      261,      260,      259, 
	     257,      126,       45,       43,       42,       40,       38,       33,     -387,     -392, 
	    -128,     -391,     -390,     -389,     -388,     -412,     -411,     -410,     -180,     -177, 
	    -178,      264,      263,      261,      260,      259,      257,      126,       45,       43, 
	      42,       40,       38,       33,     -125,     -126,     -124,     -127,     -402,     -401, 
	     264,      263,      262,       91,       46,       40,     -387,     -392,     -176,     -391, 
	    -390,     -389,     -388,     -412,     -411,     -410,     -180,     -177,     -178,     -333, 
	    -306,     -346,     -345,     -344,     -343,     -340,     -339,     -342,     -341,     -307, 
	    -305,     -347,     -338,     -337,     -336,     -328,     -327,     -216,      307,      306, 
	     305,      304,      303,      302,      301,      300,      299,      298,      297,      296, 
	     295,      294,      293,      292,      291,      290,      283,      264,      263,      261, 
	     260,      259,      257,      126,       45,       43,       42,       40,       38,       33, 
	    -330,       41,     -387,     -392,     -176,     -391,     -390,     -389,     -227,     -388, 
	    -412,     -411,     -410,     -180,     -177,     -178,      264,      263,      261,      260, 
	     259,      257,      126,       59,       45,       43,       42,       40,       38,       33, 
	    -228,       59,     -229,       59,     -120,      257,     -119,       40,     -387,     -392, 
	    -176,     -391,     -390,     -389,     -240,     -196,     -388,      -32,     -411,     -410, 
	    -180,     -177,     -178,     -162,     -163,     -165,     -166,     -167,     -168,     -169, 
	    -170,     -171,     -172,     -173,      320,      319,      318,      317,      316,      315, 
	     314,      313,      311,      310,      309,      264,      263,      261,      260,      259, 
	     257,      126,      123,       59,       45,       43,       42,       40,       38,       33, 
	    -117,       40,     -116,       40,     -115,       40,     -387,     -392,     -176,     -391, 
	    -390,     -389,     -240,     -196,     -245,     -388,      -32,     -411,     -410,     -180, 
	    -177,     -178,     -333,     -352,     -351,     -350,     -349,     -348,     -304,     -306, 
	    -346,     -345,     -344,     -343,     -340,     -339,     -342,     -341,     -307,     -305, 
	    -347,     -338,     -337,     -336,     -328,     -327,     -216,     -162,     -163,     -165, 
	    -166,     -167,     -168,     -169,     -170,     -171,     -172,     -173,      320,      319, 
	     318,      317,      316,      315,      314,      313,      311,      310,      309,      307, 
	     306,      305,      304,      303,      302,      301,      300,      299,      298,      297, 
	     296,      295,      294,      293,      292,      291,      290,      289,      288,      287, 
	     286,      285,      284,      283,      264,      263,      261,      260,      259,      257, 
	     126,      125,      123,       59,       45,       43,       42,       40,       38,       33, 
	    -114,       58,     -112,     -239,       59,       44,     -111,       58,     -387,     -392, 
	    -176,     -391,     -390,     -389,     -110,     -109,     -160,     -388,     -412,     -411, 
	    -410,     -180,     -177,     -178,      264,      263,      261,      260,      259,      257, 
	     126,      123,       91,       46,       45,       43,       42,       40,       38,       33, 
	    -195,       61,     -311,      -11,      257,      125,     -211,       -8,     -188,     -303, 
	     257,       58,       42,       40,     -387,     -392,     -176,      -38,     -390,     -389, 
	    -277,     -388,     -412,     -411,     -410,     -180,     -177,     -178,      264,      263, 
	     261,      260,      259,      257,      126,       93,       45,       43,       42,       40, 
	      38,       33,     -104,     -103,       91,       40,     -155,     -271,       -8,     -156, 
	    -303,     -333,     -352,     -351,     -350,     -349,     -348,     -304,     -306,     -346, 
	    -345,     -344,     -343,     -340,     -339,     -342,     -341,     -307,     -305,     -347, 
	    -338,     -337,     -336,     -328,     -327,     -216,      307,      306,      305,      304, 
	     303,      302,      301,      300,      299,      298,      297,      296,      295,      294, 
	     293,      292,      291,      290,      289,      288,      287,      286,      285,      284, 
	     283,      257,       91,       42,       41,       40,     -155,     -156,     -303,      257, 
	      91,       40,     -333,     -352,     -351,     -350,     -349,     -348,     -304,     -306, 
	    -346,     -345,     -344,     -343,     -340,     -339,     -342,     -341,     -307,     -305, 
	    -347,     -338,     -337,     -336,     -328,     -327,     -216,     -286,      308,      307, 
	     306,      305,      304,      303,      302,      301,      300,      299,      298,      297, 
	     296,      295,      294,      293,      292,      291,      290,      289,      288,      287, 
	     286,      285,      284,      283,     -280,      257,     -387,     -392,     -176,     -391, 
	    -390,     -389,     -388,     -412,     -411,     -410,     -180,     -177,     -178,     -306, 
	    -307,     -305,      300,      299,      290,      264,      263,      261,      260,      259, 
	     257,      126,       45,       43,       42,       40,       38,       33,     -301,       93, 
	    -296,       93,     -403,      257,     -404,      257,     -387,     -392,     -176,     -406, 
	    -391,     -390,     -389,     -388,     -412,     -411,     -410,     -180,     -177,     -178, 
	     264,      263,      261,      260,      259,      257,      126,       45,       43,       42, 
	      41,       40,       38,       33,      -93,       -8,     -156,       91,       42,       40, 
	     -92,       41,     -409,     -112,       44,       41,     -112,     -226,       59,       44, 
	    -230,       59,     -387,     -392,     -176,     -391,     -390,     -389,     -240,     -388, 
	    -412,     -411,     -410,     -180,     -177,     -178,     -333,     -352,     -351,     -350, 
	    -349,     -348,     -304,     -306,     -346,     -345,     -344,     -343,     -340,     -339, 
	    -342,     -341,     -307,     -305,     -347,     -338,     -337,     -336,     -328,     -327, 
	    -216,      307,      306,      305,      304,      303,      302,      301,      300,      299, 
	     298,      297,      296,      295,      294,      293,      292,      291,      290,      289, 
	     288,      287,      286,      285,      284,      283,      264,      263,      261,      260, 
	     259,      257,      126,       59,       45,       43,       42,       40,       38,       33, 
	     -89,      314,      -85,       58,     -256,      257,     -110,     -260,     -109,       91, 
	      61,       46,      -83,     -266,      125,       44,     -276,       93,     -273,       93, 
	    -269,     -333,     -352,     -351,     -350,     -349,     -348,     -304,     -306,     -346, 
	    -345,     -344,     -343,     -340,     -339,     -342,     -341,     -307,     -305,     -347, 
	    -338,     -337,     -336,     -328,     -327,     -216,      307,      306,      305,      304, 
	     303,      302,      301,      300,      299,      298,      297,      296,      295,      294, 
	     293,      292,      291,      290,      289,      288,      287,      286,      285,      284, 
	     283,       41,     -387,     -392,     -176,      -56,     -390,     -389,     -275,     -388, 
	    -412,     -411,     -410,     -180,     -177,     -178,      264,      263,      261,      260, 
	     259,      257,      126,       93,       45,       43,       42,       40,       38,       33, 
	    -270,       41,     -278,       41,     -298,       93,     -297,       93,     -112,      -80, 
	      58,       44,      -57,       41,      -79,       41,     -405,      -78,       44,       41, 
	    -112,     -407,       93,       44,      -93,     -271,       -8,     -156,     -333,     -352, 
	    -351,     -350,     -349,     -348,     -304,     -306,     -346,     -345,     -344,     -343, 
	    -340,     -339,     -342,     -341,     -307,     -305,     -347,     -338,     -337,     -336, 
	    -328,     -327,     -216,      307,      306,      305,      304,      303,      302,      301, 
	     300,      299,      298,      297,      296,      295,      294,      293,      292,      291, 
	     290,      289,      288,      287,      286,      285,      284,      283,       91,       42, 
	      41,       40,      -93,     -156,       91,       40,     -387,     -392,     -176,     -391, 
	    -390,     -389,      -77,     -388,     -412,     -411,     -410,     -180,     -177,     -178, 
	     264,      263,      261,      260,      259,      257,      126,      123,       45,       43, 
	      42,       40,       38,       33,     -387,     -392,     -176,     -391,     -390,     -389, 
	    -240,     -388,     -412,     -411,     -410,     -180,     -177,     -178,      264,      263, 
	     261,      260,      259,      257,      126,       59,       45,       43,       42,       40, 
	      38,       33,      -74,       40,      -73,     -112,       44,       41,      -72,     -112, 
	      44,       41,      -71,     -112,       44,       41,     -257,       93,     -387,     -392, 
	    -176,     -391,     -390,     -389,     -110,     -109,     -160,     -265,     -388,     -412, 
	    -411,     -410,     -180,     -177,     -178,      264,      263,      261,      260,      259, 
	     257,      126,      125,      123,       91,       46,       45,       43,       42,       40, 
	      38,       33,     -268,       41,     -274,       93,     -272,       93,      -77,      123, 
	    -387,     -392,     -176,      -68,     -391,     -390,     -389,     -388,     -412,     -411, 
	    -410,     -180,     -177,     -178,      264,      263,      261,      260,      259,      257, 
	     126,       45,       43,       42,       41,       40,       38,       33,     -387,     -392, 
	    -176,      -66,     -391,     -390,     -389,     -388,     -412,     -411,     -410,     -180, 
	    -177,     -178,      264,      263,      261,      260,      259,      257,      126,       45, 
	      43,       42,       41,       40,       38,       33,      -63,     -400,      125,       44, 
	     -62,     -112,       44,       41,      -61,     -112,       44,       41,      -60,     -112, 
	      44,       41,      -59,      312,     -387,     -392,     -176,     -391,     -390,     -389, 
	    -110,     -109,     -160,     -399,     -388,     -412,     -411,     -410,     -180,     -177, 
	    -178,      264,      263,      261,      260,      259,      257,      126,      125,      123, 
	      91,       46,       45,       43,       42,       40,       38,       33,     -235,       59,   -1
};
static int yypact[] = {

	      25,       25,       25,       25,       25,       69,      111,      116,      128,      163, 
	     199,       91,       91,      116,      128,      575,      624,      629,      682,      685, 
	     687,      689,      691,      694,      700,      706,      710,      715,      729,      741, 
	     800,     1077,     1111,     1154,     1219,     1311,     1347,     1459,     1154,      685, 
	     687,      689,      691,      694,      700,      700,      706,      706,      706,      706, 
	     710,      710,      715,      715,     1624,     1737,     1739,     1813,      934,     1849, 
	     934,      934,     1831,     1810,     1806,      934,     1802,      934,     1798,      524, 
	     934,      934,      934,      557,     1782,     1754,     1094,      557,     1739,      557, 
	    1735,     1733,     1715,     1697,      934,     1694,     1690,     1686,     1683,     1668, 
	    1668,     1640,     1593,     1562,     1558,     1555,     1553,     1550,     1547,     1545, 
	    1543,     1541,     1526,     1486,     1457,     1454,      524,     1449,      557,     1445, 
	     934,      557,     1443,      934,      557,      557,      557,     1441,     1401,     1361, 
	    1358,     1354,     1351,      557,     1330,     1315,     1313,      838,      838,      557, 
	     557,      557,      557,      557,      557,      557,      557,      557,      557,      557, 
	     557,      557,      557,      557,      557,      557,      557,      557,      557,     1309, 
	     557,     1292,     1275,     1248,     1186,     1138,     1120,      557,     1114,     1094, 
	    1074,      557,     1071,     1018,      965,      963,      961,      934,      907,      905, 
	     903,      901,      886,      557,      871,      838,      781,      781,      557,      755, 
	     662,      643,      639,      635,      632,      600,      578,      557,      572,      557, 
	     542,      539,      123,       63,      524,      458,      380,      350,      328,      283, 
	     255,       91,      234,      209,      202,       71,      195,      191,      135,      132, 
	     123,       91,       71,       63,       56,       52,   25
};
static int yygo[] = {

	      -5,     -175,     -408,      197,      -64,      -65,      -67,      -86,      -87,      -88, 
	     -94,     -122,     -122,      -98,     -121,     -122,     -122,     -161,      175,      173, 
	     172,      148,      128,      127,      123,      116,      115,      114,       75,       74, 
	      73,      -31,      -95,      -96,      -97,     -123,      128,      127,      -69,     -106, 
	      76,     -267,     -267,     -267,     -397,     -267,      -81,     -267,     -365,     -398, 
	    -378,      -99,     -100,     -105,     -267,     -150,     -267,     -182,     -366,      198, 
	     194,      180,      159,      155,      151,      150,      129,      124,      111,      106, 
	     102,       82,       77,       76,       69,       62,     -386,     -386,     -386,     -386, 
	    -386,     -386,     -386,     -386,     -386,     -386,     -386,     -386,     -386,     -386, 
	    -386,     -386,     -386,     -386,     -386,     -386,     -386,     -386,     -386,     -396, 
	    -395,     -386,     -393,     -386,     -386,      -29,      189,      187,      179,      178, 
	     177,      176,      161,      157,      147,      146,      145,      144,      143,      142, 
	     141,      140,      139,      138,      137,      136,      135,      134,      133,      132, 
	     131,      130,      108,       91,       79,     -179,     -385,     -383,     -382,     -381, 
	    -394,     -384,      178,      132,      131,      130,       91,      -54,      -53,      -28, 
	     134,      133,      -52,      -51,      -27,      136,      135,      -50,      -49,      -48, 
	     -47,      -26,      140,      139,      138,      137,      -46,      -45,      -25,      142, 
	     141,      -44,      -24,      143,      -43,      -23,      144,      -42,      -22,      145, 
	     -41,      -21,      146,      -40,      -20,      147,      -19,     -380,     -364,     -364, 
	    -364,     -364,     -364,     -379,      189,      187,      161,      157,      108,       79, 
	    -130,      -84,     -315,     -113,     -316,     -308,      187,      161,      157,      108, 
	    -219,      -91,     -242,     -242,     -218,     -222,      196,      195,      163,      118, 
	       9,     -356,     -357,     -358,     -359,     -214,      -17,      -17,      -17,      -17, 
	     -17,     -214,     -194,      216,      199,      154,      153,      103,       92,        4, 
	       3,        2,        1,        0,     -207,     -192,     -208,      206,       -4,      -13, 
	     -13,      -13,      -13,      -13,      -13,      -13,      -13,      -13,       -3,      211, 
	     202,      201,      185,      175,      128,      127,       12,       11,     -288,      -12, 
	     -12,     -287,      -12,      -12,     -287,      -12,     -287,     -288,      -12,     -288, 
	     -12,      -12,      -12,       -2,      211,      202,      201,      198,      185,      182, 
	     180,      175,      151,      128,      127,       13,       12,       11,        7,       -1, 
	    -354,     -355,      192,     -283,      -16,      -33,      -33,      -16,      -10,     -201, 
	     213,      203,      193,      192,      156,       16,     -262,     -261,     -262,     -263, 
	    -353,     -264,      194,      106,       82,       69,       62,     -335,     -334,     -215, 
	    -186,     -203,      201,     -209,     -325,     -325,     -326,      202,      185,     -323, 
	    -323,     -324,      202,      185,     -319,     -320,      -37,      -37,      -37,     -204, 
	     175,      128,      127,       12,       11,     -187,     -317,     -318,      156,     -191, 
	    -205,      205,     -309,     -309,     -310,      188,      158,     -290,     -289,      -35, 
	     -55,      -55,      -35,     -210,      154,       92,       36,       16,       13,        7, 
	     -15,      -15,       -9,      209,       34,     -152,     -181,      -14,      198,      182, 
	     -82,     -184,     -102,      199,      103,     -185,      -18,     -284,     -285,      153, 
	    -282,     -279,     -101,       36,       16,      -39,      -39,      -34,       54,       34, 
	     -70,      -70,     -107,       82,       62,     -108,     -258,     -259,      107,     -238, 
	    -233,     -231,     -234,     -232,      -58,     -237,     -236,     -248,     -249,     -247, 
	    -118,     -241,      167,      113,      110,       84,       72,       71,       70,       67, 
	      65,       61,       60,       58,     -255,     -220,     -221,     -254,      196,        9, 
	     -75,      -76,      -90,     -253,      118,       90,       89,     -252,     -251,     -250, 
	    -164,     -243,     -244,      163,     -224,     -225,        4,     -223,     -197,   -1
};
static int yypgo[] = {

	       0,        0,        0,      105,      105,      154,      154,      154,      161,      161, 
	     161,      168,      168,      168,      168,      168,      172,      172,      172,      175, 
	     175,      178,      178,      181,      181,      184,      184,      186,      186,      193, 
	     232,      232,      232,      232,      301,      327,      349,      349,      357,      328, 
	     364,      309,      309,      373,      373,      392,      398,       35,      402,      402, 
	     402,      457,      468,      468,      467,      467,      465,      465,        0,        0, 
	     459,      459,      459,      459,      459,      458,      458,      458,      458,      458, 
	     458,      457,      457,      453,      453,      462,      462,      460,      460,      447, 
	     447,      444,      444,      444,      431,      431,      431,      431,      431,      431, 
	     417,      417,      415,      415,      412,       39,       39,       39,       39,      321, 
	     321,      321,      407,      407,      407,      407,      407,      407,      407,      407, 
	     407,      407,      407,       35,      395,      395,      398,      398,      396,      396, 
	     392,      387,      387,      373,      373,      382,      382,      382,      382,      382, 
	     382,      382,      382,      382,      382,      382,      382,      382,      299,      283, 
	     283,      283,      364,      360,      360,      328,      328,      328,      328,      357, 
	     357,      355,      355,      349,      349,      336,      341,      331,      331,      331, 
	     331,      329,      329,      333,      246,      327,      327,      258,      258,      258, 
	     258,      258,      258,      258,      258,      258,      258,      258,      258,      258, 
	     258,      258,      248,      248,      248,      248,      248,      301,      244,      244, 
	     232,      232,      232,      232,      215,      215,      215,      215,      205,       17, 
	      17,      200,      200,      200,      200,      200,      200,      200,      200,      200, 
	     200,      200,       58,       58,      193,      149,      149,      149,      149,      141, 
	     141,      135,      135,      135,      135,      135,      135,      105,      105,      105, 
	     105,       32,       32,       31,       31,       31,       31,       31,       31,       31, 
	      31,       31,       31,        2,        2,        2,        2,    0
};
static int yyrlen[] = {

	       0,        0,        0,        1,        4,        1,        3,        3,        1,        3, 
	       3,        1,        3,        3,        3,        3,        1,        3,        3,        1, 
	       3,        1,        3,        1,        3,        1,        3,        1,        3,        1, 
	       1,        1,        1,        1,        1,        2,        1,        1,        1,        2, 
	       1,        2,        1,        1,        2,        1,        1,        1,        1,        1, 
	       2,        5,        2,        1,        3,        4,        1,        1,        2,        1, 
	       3,        2,        2,        2,        3,        7,        6,        7,        6,        7, 
	       5,        5,        7,        2,        1,        1,        1,        2,        1,        3, 
	       2,        3,        4,        3,        1,        1,        1,        1,        1,        1, 
	       2,        3,        2,        1,        2,        4,        3,        2,        1,        4, 
	       3,        1,        4,        3,        3,        2,        4,        3,        4,        3, 
	       3,        2,        3,        2,        3,        1,        2,        2,        3,        1, 
	       3,        2,        1,        3,        2,        3,        4,        4,        3,        4, 
	       5,        6,        6,        4,        4,        5,        3,        1,        1,        1, 
	       1,        1,        3,        3,        1,        6,        5,        5,        4,        3, 
	       2,        3,        1,        2,        2,        3,        2,        2,        1,        2, 
	       1,        1,        1,        1,        4,        4,        5,        1,        1,        1, 
	       1,        1,        1,        1,        1,        1,        1,        1,        1,        1, 
	       1,        1,        1,        1,        1,        1,        1,        3,        3,        1, 
	       2,        2,        2,        2,        4,        3,        3,        2,        1,        3, 
	       1,        1,        1,        1,        1,        1,        1,        1,        1,        1, 
	       1,        1,        3,        1,        5,        3,        3,        3,        1,        4, 
	       1,        1,        1,        1,        1,        1,        1,        2,        2,        2, 
	       2,        3,        1,        7,        6,        2,        2,        3,        3,        4, 
	       3,        4,        1,        3,        1,        1,        1,    2
};
#define YYS0	216
#define YYDELTA	165
#define YYNPACT	217
#define YYNDEF	58

#define YYr245	0
#define YYr246	1
#define YYr247	2
#define YYr17	3
#define YYr22	4
#define YYr35	5
#define YYr36	6
#define YYr37	7
#define YYr38	8
#define YYr39	9
#define YYr40	10
#define YYr41	11
#define YYr42	12
#define YYr43	13
#define YYr44	14
#define YYr45	15
#define YYr46	16
#define YYr47	17
#define YYr48	18
#define YYr49	19
#define YYr50	20
#define YYr51	21
#define YYr52	22
#define YYr53	23
#define YYr54	24
#define YYr55	25
#define YYr56	26
#define YYr57	27
#define YYr58	28
#define YYr59	29
#define YYr81	30
#define YYr83	31
#define YYr85	32
#define YYr87	33
#define YYr91	34
#define YYr115	35
#define YYr127	36
#define YYr129	37
#define YYr132	38
#define YYr139	39
#define YYr142	40
#define YYr148	41
#define YYr149	42
#define YYr163	43
#define YYr164	44
#define YYr169	45
#define YYr175	46
#define YYr178	47
#define YYr180	48
#define YYr181	49
#define YYr182	50
#define YYr223	51
#define YYr244	52
#define YYr243	53
#define YYr242	54
#define YYr241	55
#define YYr240	56
#define YYr239	57
#define YYr238	58
#define YYr237	59
#define YYr236	60
#define YYr235	61
#define YYr234	62
#define YYr233	63
#define YYr232	64
#define YYr231	65
#define YYr230	66
#define YYr229	67
#define YYr228	68
#define YYr227	69
#define YYr226	70
#define YYr225	71
#define YYr224	72
#define YYr222	73
#define YYr221	74
#define YYr220	75
#define YYr219	76
#define YYr218	77
#define YYr217	78
#define YYr216	79
#define YYr215	80
#define YYr214	81
#define YYr213	82
#define YYr212	83
#define YYr211	84
#define YYr210	85
#define YYr209	86
#define YYr208	87
#define YYr207	88
#define YYr206	89
#define YYr205	90
#define YYr204	91
#define YYr203	92
#define YYr202	93
#define YYr201	94
#define YYr200	95
#define YYr199	96
#define YYr198	97
#define YYr197	98
#define YYr196	99
#define YYr195	100
#define YYr194	101
#define YYr193	102
#define YYr192	103
#define YYr191	104
#define YYr190	105
#define YYr189	106
#define YYr188	107
#define YYr187	108
#define YYr186	109
#define YYr185	110
#define YYr184	111
#define YYr183	112
#define YYr179	113
#define YYr177	114
#define YYr176	115
#define YYr174	116
#define YYr173	117
#define YYr172	118
#define YYr171	119
#define YYr170	120
#define YYr168	121
#define YYr167	122
#define YYr166	123
#define YYr165	124
#define YYr162	125
#define YYr161	126
#define YYr160	127
#define YYr159	128
#define YYr158	129
#define YYr157	130
#define YYr156	131
#define YYr155	132
#define YYr154	133
#define YYr153	134
#define YYr152	135
#define YYr151	136
#define YYr150	137
#define YYr147	138
#define YYr146	139
#define YYr145	140
#define YYr144	141
#define YYr143	142
#define YYr141	143
#define YYr140	144
#define YYr138	145
#define YYr137	146
#define YYr136	147
#define YYr135	148
#define YYr134	149
#define YYr133	150
#define YYr131	151
#define YYr130	152
#define YYr128	153
#define YYr126	154
#define YYr125	155
#define YYr124	156
#define YYr123	157
#define YYr122	158
#define YYr121	159
#define YYr120	160
#define YYr119	161
#define YYr118	162
#define YYr117	163
#define YYr116	164
#define YYr114	165
#define YYr113	166
#define YYr112	167
#define YYr111	168
#define YYr110	169
#define YYr109	170
#define YYr108	171
#define YYr107	172
#define YYr106	173
#define YYr105	174
#define YYr104	175
#define YYr103	176
#define YYr102	177
#define YYr101	178
#define YYr100	179
#define YYr99	180
#define YYr98	181
#define YYr97	182
#define YYr96	183
#define YYr95	184
#define YYr94	185
#define YYr93	186
#define YYr92	187
#define YYr90	188
#define YYr89	189
#define YYr88	190
#define YYr86	191
#define YYr84	192
#define YYr82	193
#define YYr80	194
#define YYr79	195
#define YYr78	196
#define YYr77	197
#define YYr76	198
#define YYr75	199
#define YYr74	200
#define YYr73	201
#define YYr72	202
#define YYr71	203
#define YYr70	204
#define YYr69	205
#define YYr68	206
#define YYr67	207
#define YYr66	208
#define YYr65	209
#define YYr64	210
#define YYr63	211
#define YYr62	212
#define YYr61	213
#define YYr60	214
#define YYr34	215
#define YYr33	216
#define YYr32	217
#define YYr31	218
#define YYr30	219
#define YYr29	220
#define YYr28	221
#define YYr27	222
#define YYr26	223
#define YYr25	224
#define YYr24	225
#define YYr23	226
#define YYr21	227
#define YYr20	228
#define YYr19	229
#define YYr18	230
#define YYr16	231
#define YYr15	232
#define YYr14	233
#define YYr13	234
#define YYr12	235
#define YYr11	236
#define YYr10	237
#define YYr9	238
#define YYr8	239
#define YYr7	240
#define YYr6	241
#define YYr5	242
#define YYr4	243
#define YYr3	244
#define YYr2	245
#define YYr1	246
#define YYrACCEPT	YYr245
#define YYrERROR	YYr246
#define YYrLR2	YYr247
#if YYDEBUG
char * yysvar[] = {
	"$accept",
	"translation_unit",
	"primary_expression",
	"expression",
	"postfix_expression",
	"argument_expression_list",
	"type_name",
	"initializer_list",
	"assignment_expression",
	"unary_expression",
	"unary_operator",
	"cast_expression",
	"multiplicative_expression",
	"additive_expression",
	"shift_expression",
	"relational_expression",
	"equality_expression",
	"and_expression",
	"exclusive_or_expression",
	"inclusive_or_expression",
	"logical_and_expression",
	"logical_or_expression",
	"conditional_expression",
	"assignment_operator",
	"constant_expression",
	"declaration",
	"declaration_specifiers",
	"init_declarator_list",
	"attribute_specifiers",
	"storage_class_specifier",
	"type_specifier",
	"type_qualifier",
	"function_specifier",
	"init_declarator",
	"declarator",
	"initializer",
	"struct_or_union_specifier",
	"enum_specifier",
	"struct_or_union",
	"struct_declaration_list",
	"attribute_specifier",
	"struct_declaration",
	"anonymous_union",
	"specifier_qualifier_list",
	"struct_declarator_list",
	"struct_declarator",
	"enumerator_list",
	"enumerator",
	"pointer",
	"direct_declarator",
	"type_qualifier_list",
	"parameter_type_list",
	"identifier_list",
	"parameter_list",
	"parameter_declaration",
	"abstract_declarator",
	"direct_abstract_declarator",
	"designation",
	"designator_list",
	"designator",
	"statement",
	"labeled_statement",
	"compound_statement",
	"expression_statement",
	"selection_statement",
	"iteration_statement",
	"jump_statement",
	"block_item_list",
	"block_item",
	"external_declaration",
	"function_definition",
	"declaration_list",
	0
};
int yyrmap[] = {

	     245,      246,      247,       17,       22,       35,       36,       37,       38,       39, 
	      40,       41,       42,       43,       44,       45,       46,       47,       48,       49, 
	      50,       51,       52,       53,       54,       55,       56,       57,       58,       59, 
	      81,       83,       85,       87,       91,      115,      127,      129,      132,      139, 
	     142,      148,      149,      163,      164,      169,      175,      178,      180,      181, 
	     182,      223,      244,      243,      242,      241,      240,      239,      238,      237, 
	     236,      235,      234,      233,      232,      231,      230,      229,      228,      227, 
	     226,      225,      224,      222,      221,      220,      219,      218,      217,      216, 
	     215,      214,      213,      212,      211,      210,      209,      208,      207,      206, 
	     205,      204,      203,      202,      201,      200,      199,      198,      197,      196, 
	     195,      194,      193,      192,      191,      190,      189,      188,      187,      186, 
	     185,      184,      183,      179,      177,      176,      174,      173,      172,      171, 
	     170,      168,      167,      166,      165,      162,      161,      160,      159,      158, 
	     157,      156,      155,      154,      153,      152,      151,      150,      147,      146, 
	     145,      144,      143,      141,      140,      138,      137,      136,      135,      134, 
	     133,      131,      130,      128,      126,      125,      124,      123,      122,      121, 
	     120,      119,      118,      117,      116,      114,      113,      112,      111,      110, 
	     109,      108,      107,      106,      105,      104,      103,      102,      101,      100, 
	      99,       98,       97,       96,       95,       94,       93,       92,       90,       89, 
	      88,       86,       84,       82,       80,       79,       78,       77,       76,       75, 
	      74,       73,       72,       71,       70,       69,       68,       67,       66,       65, 
	      64,       63,       62,       61,       60,       34,       33,       32,       31,       30, 
	      29,       28,       27,       26,       25,       24,       23,       21,       20,       19, 
	      18,       16,       15,       14,       13,       12,       11,       10,        9,        8, 
	       7,        6,        5,        4,        3,        2,        1,    0
};
int yysmap[] = {

	      32,       33,       34,       35,       37,       38,       41,       46,       49,       53, 
	      60,       63,       64,       72,       76,       95,      107,      109,      118,      119, 
	     120,      121,      122,      123,      124,      125,      126,      127,      129,      134, 
	     140,      176,      180,      196,      200,      210,      255,      288,      294,      303, 
	     304,      305,      306,      307,      308,      309,      310,      311,      312,      313, 
	     314,      315,      316,      317,      331,      360,      366,      397,      406,      405, 
	     404,      402,      399,      394,      393,      392,      391,      390,      389,      381, 
	     378,      377,      376,      375,      374,      373,      372,      368,      367,      365, 
	     358,      356,      352,      348,      344,      342,      341,      340,      339,      338, 
	     337,      333,      330,      329,      327,      323,      322,      302,      299,      298, 
	     293,      291,      290,      289,      286,      282,      280,      279,      277,      276, 
	     275,      274,      272,      271,      268,      267,      266,      265,      264,      263, 
	     260,      257,      256,      254,      253,      252,      251,      247,      244,      241, 
	     229,      228,      227,      226,      225,      224,      223,      222,      221,      220, 
	     219,      218,      217,      216,      215,      214,      213,      212,      211,      209, 
	     207,      205,      202,      201,      199,      195,      192,      191,      183,      177, 
	     173,      166,      165,      163,      158,      157,      156,      155,      154,      153, 
	     152,      151,      150,      147,      146,      142,      139,      138,      137,      136, 
	     116,      115,      114,      112,      111,      102,       97,       94,       90,       89, 
	      88,       86,       85,       83,       82,       81,       80,       77,       75,       74, 
	      73,       69,       68,       65,       62,       59,       56,       55,       52,       50, 
	      47,       40,       39,       36,       11,        8,        0,      148,       78,       79, 
	     149,        1,        2,       58,        3,      335,      259,      261,      262,      336, 
	     408,      401,      409,      403,      410,      395,      396,      411,      273,      159, 
	     160,      161,      269,      162,      270,      164,      343,      379,      346,      167, 
	     168,      169,      170,      171,      172,      347,      380,      349,      278,      350, 
	     398,      382,      351,      281,      383,      353,      178,      384,      357,      361, 
	     292,      386,      355,      385,      359,      354,      287,      362,      332,      297, 
	     106,      197,      198,      295,      108,      296,      103,       70,      104,       71, 
	     110,      203,      204,      113,      242,      301,      364,      363,      206,      208, 
	     300,      105,       48,        4,        5,        6,        7,      185,      188,       61, 
	     283,      189,      184,       91,      284,      190,      285,       96,       92,       93, 
	     193,       98,       99,       66,      100,       67,        9,       10,       51,      258, 
	     101,      194,       12,       13,       14,       15,       16,       17,       18,       19, 
	      20,       21,       22,       23,       24,       25,       26,       27,       28,       29, 
	      30,       31,      179,      181,       54,       42,       43,       44,       45,      182, 
	      84,       87,       57,      186,      345,      174,      230,      231,      232,      233, 
	     234,      235,      236,      237,      238,      239,      240,      321,      117,      387, 
	     318,      319,      320,      128,      371,      187,      130,      131,      132,      133, 
	     175,      135,      243,      245,      246,      248,      388,      326,      407,      400, 
	     249,      250,      324,      325,      369,      328,      370,      141,      334,      143, 
	     144,  145
};
int yy_parse::yyntoken = 91;
int yy_parse::yynvar = 72;
int yy_parse::yynstate = 412;
int yy_parse::yynrule = 248;
#endif



#line 2 "C:/Program Files/Mortice Kern Systems/Lex and Yacc/etc/yyparse.cpp"
// C++ YACC parser code
// Copyright 1991 by Mortice Kern Systems Inc.  All rights reserved.
//
// If YYDEBUG is defined as 1 and yy_parse::yydebug is set to 1,
// yyparse() will print a travelogue of its actions as it reads
// and parses input.
//
// YYSYNC can be defined to cause yyparse() to attempt to always
// hold a lookahead token

const YY_MIN_STATE_NUM = 20;	// not useful to be too small!

#if YYDEBUG
#ifdef YYTRACE
long	* yy_parse::States	= yyStates;
#endif
yyTypedRules * yy_parse::Rules	= yyRules;
yyNamedType * yy_parse::TokenTypes = yyTokenTypes;

#define YY_TRACE(fn) { done = 0; fn(); if (done) YYRETURN(-1); }
#endif

// Constructor for yy_parse: user-provided tables
yy_parse::yy_parse(int sz, int * states, YYSTYPE * stack)
{
	mustfree = 0;
	if ((size = sz) < YY_MIN_STATE_NUM
	 || (stateStack = states) == (int *) 0
	 || (valueStack = stack) == (YYSTYPE *) 0) {
		fprintf(stderr,"Bad state/stack given");
		exit(1);
	}
	reset = 1;		// force reset
#if YYDEBUG
	yydebug = 0;
	typeStack = new int[size+1];
	if (typeStack == (int *) 0) {
		fprintf(stderr,"Cannot allocate typeStack");
		exit(1);
	}
#endif
}
// Constructor for yy_parse: allocate tables with new
yy_parse::yy_parse(int sz)
{
	size = sz;
	reset = 1;		// force reset
	mustfree = 1;		// delete space in deconstructor
#if YYDEBUG
	yydebug = 0;
	typeStack = new int[size+1];
#endif
	stateStack = new int[size+1];
	valueStack = new YYSTYPE[size+1];

	if (stateStack == (int *) 0 || valueStack == (YYSTYPE *) 0
#if YYDEBUG
		|| typeStack == (int *) 0
#endif
	    ) {
		fprintf(stderr,"Not enough space for parser stacks");
		exit(1);
	}
}
// Destructor for class yy_parse
//	Free up space
yy_parse::~yy_parse()
{
	if (mustfree) {
		delete [] stateStack;
		delete [] valueStack;
	}
	stateStack = (int *) 0;
#if YYDEBUG
	delete [] typeStack;
#endif
}

#ifdef YACC_WINDOWS

// The initial portion of the yacc parser.
// In an windows environment, it will load the desired
// resources, obtain pointers to them, and then call
// the protected member win_yyparse() to acutally begin the
// parsing. When complete, win_yyparse() will return a
// value back to our new yyparse() function, which will 
// record that value temporarily, release the resources
// from global memory, and finally return the value
// back to the caller of yyparse().

int
yy_parse::yyparse(yy_scan* ps)
{
	int wReturnValue;
	HANDLE hRes_table;
	int far *old_yydef;		// the following are used for saving
	int far *old_yyex;		// the current pointers
	int far *old_yyact;
	int far *old_yypact;
	int far *old_yygo;
	int far *old_yypgo;
	int far *old_yyrlen;

	// the following code will load the required
	// resources for a Windows based parser.

	hRes_table = LoadResource (hInst,
		FindResource (hInst, "UD_RES_yyYACC", "yyYACCTBL"));
	
	// return an error code if any
	// of the resources did not load

	if (hRes_table == (HANDLE)NULL)
		return (1);
	
	// the following code will lock the resources
	// into fixed memory locations for the parser
	// (also, save away the old pointer values)

	old_yydef = yydef;
	old_yyex = yyex;
	old_yyact = yyact;
	old_yypact = yypact;
	old_yygo = yygo;
	old_yypgo = yypgo;
	old_yyrlen = yyrlen;

	yydef = (int far *)LockResource (hRes_table);
	yyex = (int far *)(yydef + Sizeof_yydef);
	yyact = (int far *)(yyex + Sizeof_yyex);
	yypact = (int far *)(yyact + Sizeof_yyact);
	yygo = (int far *)(yypact + Sizeof_yypact);
	yypgo = (int far *)(yygo + Sizeof_yygo);
	yyrlen = (int far *)(yypgo + Sizeof_yypgo);

	// call the official yyparse() function

	wReturnValue = win_yyparse (ps);

	// unlock the resources

	UnlockResource (hRes_table);

	// and now free the resource

	FreeResource (hRes_table);

	//
	// restore previous pointer values
	//

	yydef = old_yydef;
	yyex = old_yyex;
	yyact = old_yyact;
	yypact = old_yypact;
	yygo = old_yygo;
	yypgo = old_yypgo;
	yyrlen = old_yyrlen;

	return (wReturnValue);
}	// end yyparse()


// The parser proper.
//	Note that this code is reentrant; you can return a value
//	and then resume parsing by recalling yyparse().
//	Call yyreset() before yyparse() if you want a fresh start

int
yy_parse::win_yyparse(yy_scan* ps)

#else /* YACC_WINDOWS */

// The parser proper.
//	Note that this code is reentrant; you can return a value
//	and then resume parsing by recalling yyparse().
//	Call yyreset() before yyparse() if you want a fresh start
int
yy_parse::yyparse(yy_scan* ps)

#endif /* YACC_WINDOWS */

{
#ifdef YACC_WINDOWS
	int far *yyp;	// needed as res tables locked in far memory
	int far *yyq;
#else
	int	* yyp, * yyq;		// table lookup
#endif /* YACC_WINDOWS */
	int	yyj;
#if YYDEBUG
	int	yyruletype = 0;
#endif

	if ((scan = ps) == (yy_scan *) 0) {	// scanner
		fprintf(stderr,"No scanner");
		exit(1);
	}

	if (reset) {			// start new parse
		yynerrs = 0;
		yyerrflag = 0;
		yyps = stateStack;
		yypv = valueStack;
#if YYDEBUG
		yytp = typeStack;
#endif
		yystate = YYS0;
		yyclearin();
		reset = 0;
	} else			// continue saved parse
		goto yyNext;			// after action

yyStack:
	if (++yyps > &stateStack[size]) {
		scan->yyerror("Parser stack overflow");
		YYABORT;
	}
	*yyps = yystate;	/* stack current state */
	*++yypv = yyval;	/* ... and value */
#if YYDEBUG
	if (yydebug) {
		*++yytp = yyruletype;	/* ... and type */
		YY_TRACE(yyShowState)
	}
#endif

	/*
	 * Look up next action in action table.
	 */
yyEncore:
#ifdef YYSYNC
	if (yychar < 0) {
		if ((yychar = scan->yylex()) < 0) {
			if (yychar == -2) YYABORT;
			yychar = 0;
		}	/* endif */

// tfl
#ifndef USING_NAMESPACE
		yylval = ::yylval;
#endif
//

// tfl2		
#if YYDEBUG
		if (yydebug)
			yyShowRead();	// show new input token
#endif
	}
#endif
#ifdef YACC_WINDOWS
	if (yystate >= Sizeof_yypact) 	/* simple state */
#else /* YACC_WINDOWS */
	if (yystate >= sizeof yypact/sizeof yypact[0]) 	/* simple state */
#endif /* YACC_WINDOWS */
		yyi = yystate - YYDELTA;	/* reduce in any case */
	else {
		if(*(yyp = &yyact[yypact[yystate]]) >= 0) {
			/* Look for a shift on yychar */
#ifndef YYSYNC
			if (yychar < 0) {
				if ((yychar = scan->yylex()) < 0) {
					if (yychar == -2) YYABORT;
					yychar = 0;
				}	/* endif */
// tfl
#ifndef USING_NAMESPACE
				yylval = ::yylval;
#endif

#if YYDEBUG
				if (yydebug)
					yyShowRead();	// show new input token
#endif
			}
#endif
			yyq = yyp;
			yyi = yychar;
			while (yyi < *yyp++)
				;
			if (yyi == yyp[-1]) {
				yystate = yyneg(yyq[yyq-yyp]);
#if YYDEBUG
				if (yydebug) {
					yyruletype = yyGetType(yychar);
					YY_TRACE(yyShowShift)
				}
#endif
				yyval = yylval;		/* stack value */
				yyclearin();		/* clear token */
				if (yyerrflag)
					yyerrflag--;	/* successful shift */
				goto yyStack;
			}
		}

		/*
	 	 *	Fell through - take default action
	 	 */

#ifdef YACC_WINDOWS
		if (yystate >= Sizeof_yydef) 	/* simple state */
#else /* YACC_WINDOWS */
		if (yystate >= sizeof yydef /sizeof yydef[0])
#endif /* YACC_WINDOWS */
			goto yyError;
		if ((yyi = yydef[yystate]) < 0)	 { /* default == reduce? */

			/* Search exception table */
			yyp = &yyex[yyneg(yyi)];
#ifndef YYSYNC
			if (yychar < 0) {
				if ((yychar = scan->yylex()) < 0) {
					if (yychar == -2) YYABORT;
					yychar = 0;
				}	/* endif */

// tfl
#ifndef USING_NAMESPACE
				yylval = ::yylval;
#endif
//

#if YYDEBUG
				if (yydebug)
					yyShowRead();	// show new input token
#endif
			}
#endif
			while((yyi = *yyp) >= 0 && yyi != yychar)
				yyp += 2;
			yyi = yyp[1];
		}
	}

	yyj = yyrlen[yyi];

#if YYDEBUG
	if (yydebug) {
		npop = yyj; rule = yyi;
		YY_TRACE(yyShowReduce)
		yytp -= yyj;
	}
#endif
	yyps -= yyj;		/* pop stacks */
	yypvt = yypv;		/* save top */
	yypv -= yyj;
	yyval = yypv[1];	/* default action $ = $1 */
#if YYDEBUG
	if (yydebug)
		yyruletype = yyRules[yyrmap[yyi]].type;
#endif
	switch (yyi) {		/* perform semantic action */
		
case YYr1: {	/* primary_expression :  IDENTIFIER */
#line 78 "cgrammer.y"
DisplayProd(" primary_expression -> IDENTIFIER"); 
} break;

case YYr2: {	/* primary_expression :  CONSTANT */
#line 79 "cgrammer.y"
DisplayProd(" primary_expression -> CONSTANT"); 
} break;

case YYr3: {	/* primary_expression :  STRING_LITERAL */
#line 80 "cgrammer.y"
DisplayProd(" primary_expression -> STRING_LITERAL"); 
} break;

case YYr4: {	/* primary_expression :  '(' expression ')' */
#line 81 "cgrammer.y"
DisplayProd(" primary_expression -> '(' expression ')'"); 
} break;

case YYr5: {	/* postfix_expression :  primary_expression */
#line 85 "cgrammer.y"
DisplayProd(" postfix_expression -> primary_expression"); 
} break;

case YYr6: {	/* postfix_expression :  postfix_expression '[' expression ']' */
#line 86 "cgrammer.y"
DisplayProd(" postfix_expression -> postfix_expression '[' expression ']'"); 
} break;

case YYr7: {	/* postfix_expression :  postfix_expression '(' ')' */
#line 87 "cgrammer.y"
DisplayProd(" postfix_expression -> postfix_expression '(' ')'"); 
} break;

case YYr8: {	/* postfix_expression :  postfix_expression '(' argument_expression_list ')' */
#line 88 "cgrammer.y"
DisplayProd(" postfix_expression -> postfix_expression '(' argument_expression_list ')'"); 
} break;

case YYr9: {	/* postfix_expression :  postfix_expression '.' IDENTIFIER */
#line 89 "cgrammer.y"
DisplayProd(" postfix_expression -> postfix_expression '.' IDENTIFIER"); 
} break;

case YYr10: {	/* postfix_expression :  postfix_expression PTR_OP IDENTIFIER */
#line 90 "cgrammer.y"
DisplayProd(" postfix_expression -> postfix_expression PTR_OP IDENTIFIER"); 
} break;

case YYr11: {	/* postfix_expression :  postfix_expression INC_OP */
#line 91 "cgrammer.y"
DisplayProd(" postfix_expression -> postfix_expression INC_OP"); 
} break;

case YYr12: {	/* postfix_expression :  postfix_expression DEC_OP */
#line 92 "cgrammer.y"
DisplayProd(" postfix_expression -> postfix_expression DEC_OP"); 
} break;

case YYr13: {	/* postfix_expression :  '(' type_name ')' '{' initializer_list '}' */
#line 93 "cgrammer.y"
DisplayProd(" postfix_expression -> '(' type_name ')' '{' initializer_list '}'"); 
} break;

case YYr14: {	/* postfix_expression :  '(' type_name ')' '{' initializer_list ',' '}' */
#line 94 "cgrammer.y"
DisplayProd(" postfix_expression -> '(' type_name ')' '{' initializer_list ',' '}'"); 
} break;

case YYr15: {	/* argument_expression_list :  assignment_expression */
#line 98 "cgrammer.y"
DisplayProd(" argument_expression_list -> assignment_expression"); 
} break;

case YYr16: {	/* argument_expression_list :  argument_expression_list ',' assignment_expression */
#line 99 "cgrammer.y"
DisplayProd(" argument_expression_list -> argument_expression_list ',' assignment_expression"); 
} break;

case YYr17: {	/* unary_expression :  postfix_expression */
#line 103 "cgrammer.y"
DisplayProd(" unary_expression -> postfix_expression"); 
} break;

case YYr18: {	/* unary_expression :  INC_OP unary_expression */
#line 104 "cgrammer.y"
DisplayProd(" unary_expression -> INC_OP unary_expression"); 
} break;

case YYr19: {	/* unary_expression :  DEC_OP unary_expression */
#line 105 "cgrammer.y"
DisplayProd(" unary_expression -> DEC_OP unary_expression"); 
} break;

case YYr20: {	/* unary_expression :  unary_operator cast_expression */
#line 106 "cgrammer.y"
DisplayProd(" unary_expression -> unary_operator cast_expression"); 
} break;

case YYr21: {	/* unary_expression :  SIZEOF unary_expression */
#line 107 "cgrammer.y"
DisplayProd(" unary_expression -> SIZEOF unary_expression"); 
} break;

case YYr22: {	/* unary_expression :  SIZEOF '(' type_name ')' */
#line 108 "cgrammer.y"
DisplayProd(" unary_expression -> SIZEOF '(' type_name ')'"); 
} break;

case YYr23: {	/* unary_operator :  '&' */
#line 112 "cgrammer.y"
DisplayProd(" unary_operator -> '&'"); 
} break;

case YYr24: {	/* unary_operator :  '*' */
#line 113 "cgrammer.y"
DisplayProd(" unary_operator -> '*'"); 
} break;

case YYr25: {	/* unary_operator :  '+' */
#line 114 "cgrammer.y"
DisplayProd(" unary_operator -> '+'"); 
} break;

case YYr26: {	/* unary_operator :  '-' */
#line 115 "cgrammer.y"
DisplayProd(" unary_operator -> '-'"); 
} break;

case YYr27: {	/* unary_operator :  '~' */
#line 116 "cgrammer.y"
DisplayProd(" unary_operator -> '~'"); 
} break;

case YYr28: {	/* unary_operator :  '!' */
#line 117 "cgrammer.y"
DisplayProd(" unary_operator -> '!'"); 
} break;

case YYr29: {	/* cast_expression :  unary_expression */
#line 121 "cgrammer.y"
DisplayProd(" cast_expression -> unary_expression"); 
} break;

case YYr30: {	/* cast_expression :  '(' type_name ')' cast_expression */
#line 122 "cgrammer.y"
DisplayProd(" cast_expression -> '(' type_name ')' cast_expression"); 
} break;

case YYr31: {	/* multiplicative_expression :  cast_expression */
#line 126 "cgrammer.y"
DisplayProd(" multiplicative_expression -> cast_expression"); 
} break;

case YYr32: {	/* multiplicative_expression :  multiplicative_expression '*' cast_expression */
#line 127 "cgrammer.y"
DisplayProd(" multiplicative_expression -> multiplicative_expression '*' cast_expression"); 
} break;

case YYr33: {	/* multiplicative_expression :  multiplicative_expression '/' cast_expression */
#line 128 "cgrammer.y"
DisplayProd(" multiplicative_expression -> multiplicative_expression '/' cast_expression"); 
} break;

case YYr34: {	/* multiplicative_expression :  multiplicative_expression '%' cast_expression */
#line 129 "cgrammer.y"
DisplayProd(" multiplicative_expression -> multiplicative_expression '%' cast_expression"); 
} break;

case YYr35: {	/* additive_expression :  multiplicative_expression */
#line 133 "cgrammer.y"
DisplayProd(" additive_expression -> multiplicative_expression"); 
} break;

case YYr36: {	/* additive_expression :  additive_expression '+' multiplicative_expression */
#line 134 "cgrammer.y"
DisplayProd(" additive_expression -> additive_expression '+' multiplicative_expression"); 
} break;

case YYr37: {	/* additive_expression :  additive_expression '-' multiplicative_expression */
#line 135 "cgrammer.y"
DisplayProd(" additive_expression -> additive_expression '-' multiplicative_expression"); 
} break;

case YYr38: {	/* shift_expression :  additive_expression */
#line 139 "cgrammer.y"
DisplayProd(" shift_expression -> additive_expression"); 
} break;

case YYr39: {	/* shift_expression :  shift_expression LEFT_OP additive_expression */
#line 140 "cgrammer.y"
DisplayProd(" shift_expression -> shift_expression LEFT_OP additive_expression"); 
} break;

case YYr40: {	/* shift_expression :  shift_expression RIGHT_OP additive_expression */
#line 141 "cgrammer.y"
DisplayProd(" shift_expression -> shift_expression RIGHT_OP additive_expression"); 
} break;

case YYr41: {	/* relational_expression :  shift_expression */
#line 145 "cgrammer.y"
DisplayProd(" relational_expression -> shift_expression"); 
} break;

case YYr42: {	/* relational_expression :  relational_expression '<' shift_expression */
#line 146 "cgrammer.y"
DisplayProd(" relational_expression -> relational_expression '<' shift_expression"); 
} break;

case YYr43: {	/* relational_expression :  relational_expression '>' shift_expression */
#line 147 "cgrammer.y"
DisplayProd(" relational_expression -> relational_expression '>' shift_expression"); 
} break;

case YYr44: {	/* relational_expression :  relational_expression LE_OP shift_expression */
#line 148 "cgrammer.y"
DisplayProd(" relational_expression -> relational_expression LE_OP shift_expression"); 
} break;

case YYr45: {	/* relational_expression :  relational_expression GE_OP shift_expression */
#line 149 "cgrammer.y"
DisplayProd(" relational_expression -> relational_expression GE_OP shift_expression"); 
} break;

case YYr46: {	/* equality_expression :  relational_expression */
#line 153 "cgrammer.y"
DisplayProd(" equality_expression -> relational_expression"); 
} break;

case YYr47: {	/* equality_expression :  equality_expression EQ_OP relational_expression */
#line 154 "cgrammer.y"
DisplayProd(" equality_expression -> equality_expression EQ_OP relational_expression"); 
} break;

case YYr48: {	/* equality_expression :  equality_expression NE_OP relational_expression */
#line 155 "cgrammer.y"
DisplayProd(" equality_expression -> equality_expression NE_OP relational_expression"); 
} break;

case YYr49: {	/* and_expression :  equality_expression */
#line 159 "cgrammer.y"
DisplayProd(" and_expression -> equality_expression"); 
} break;

case YYr50: {	/* and_expression :  and_expression '&' equality_expression */
#line 160 "cgrammer.y"
DisplayProd(" and_expression -> and_expression '&' equality_expression"); 
} break;

case YYr51: {	/* exclusive_or_expression :  and_expression */
#line 164 "cgrammer.y"
DisplayProd(" exclusive_or_expression -> and_expression"); 
} break;

case YYr52: {	/* exclusive_or_expression :  exclusive_or_expression '^' and_expression */
#line 165 "cgrammer.y"
DisplayProd(" exclusive_or_expression -> exclusive_or_expression '^' and_expression"); 
} break;

case YYr53: {	/* inclusive_or_expression :  exclusive_or_expression */
#line 169 "cgrammer.y"
DisplayProd(" inclusive_or_expression -> exclusive_or_expression"); 
} break;

case YYr54: {	/* inclusive_or_expression :  inclusive_or_expression '|' exclusive_or_expression */
#line 170 "cgrammer.y"
DisplayProd(" inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expressionn"); 
} break;

case YYr55: {	/* logical_and_expression :  inclusive_or_expression */
#line 174 "cgrammer.y"
DisplayProd(" logical_and_expression -> inclusive_or_expression"); 
} break;

case YYr56: {	/* logical_and_expression :  logical_and_expression AND_OP inclusive_or_expression */
#line 175 "cgrammer.y"
DisplayProd(" logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression"); 
} break;

case YYr57: {	/* logical_or_expression :  logical_and_expression */
#line 179 "cgrammer.y"
DisplayProd(" logical_or_expression -> logical_and_expression"); 
} break;

case YYr58: {	/* logical_or_expression :  logical_or_expression OR_OP logical_and_expression */
#line 180 "cgrammer.y"
DisplayProd(" logical_or_expression -> logical_or_expression OR_OP logical_and_expression"); 
} break;

case YYr59: {	/* conditional_expression :  logical_or_expression */
#line 184 "cgrammer.y"
DisplayProd(" conditional_expression -> logical_or_expression"); 
} break;

case YYr60: {	/* conditional_expression :  logical_or_expression '?' expression ':' conditional_expression */
#line 185 "cgrammer.y"
DisplayProd(" conditional_expression -> logical_or_expression '?' expression ':' conditional_expression"); 
} break;

case YYr61: {	/* assignment_expression :  conditional_expression */
#line 189 "cgrammer.y"
DisplayProd(" assignment_expression -> conditional_expression"); 
} break;

case YYr62: {	/* assignment_expression :  unary_expression assignment_operator assignment_expression */
#line 190 "cgrammer.y"
DisplayProd(" assignment_expression -> unary_expression assignment_operator assignment_expression"); 
} break;

case YYr63: {	/* assignment_operator :  '=' */
#line 194 "cgrammer.y"
DisplayProd(" assignment_operator -> '='"); 
} break;

case YYr64: {	/* assignment_operator :  MUL_ASSIGN */
#line 195 "cgrammer.y"
DisplayProd(" assignment_operator -> MUL_ASSIGN"); 
} break;

case YYr65: {	/* assignment_operator :  DIV_ASSIGN */
#line 196 "cgrammer.y"
DisplayProd(" assignment_operator -> DIV_ASSIGN"); 
} break;

case YYr66: {	/* assignment_operator :  MOD_ASSIGN */
#line 197 "cgrammer.y"
DisplayProd(" assignment_operator -> MOD_ASSIGN"); 
} break;

case YYr67: {	/* assignment_operator :  ADD_ASSIGN */
#line 198 "cgrammer.y"
DisplayProd(" assignment_operator -> ADD_ASSIGN"); 
} break;

case YYr68: {	/* assignment_operator :  SUB_ASSIGN */
#line 199 "cgrammer.y"
DisplayProd(" assignment_operator -> SUB_ASSIGN"); 
} break;

case YYr69: {	/* assignment_operator :  LEFT_ASSIGN */
#line 200 "cgrammer.y"
DisplayProd(" assignment_operator -> LEFT_ASSIGN"); 
} break;

case YYr70: {	/* assignment_operator :  RIGHT_ASSIGN */
#line 201 "cgrammer.y"
DisplayProd(" assignment_operator -> RIGHT_ASSIGN"); 
} break;

case YYr71: {	/* assignment_operator :  AND_ASSIGN */
#line 202 "cgrammer.y"
DisplayProd(" assignment_operator -> AND_ASSIGN"); 
} break;

case YYr72: {	/* assignment_operator :  XOR_ASSIGN */
#line 203 "cgrammer.y"
DisplayProd(" assignment_operator -> XOR_ASSIGN"); 
} break;

case YYr73: {	/* assignment_operator :  OR_ASSIGN */
#line 204 "cgrammer.y"
DisplayProd(" assignment_operator -> OR_ASSIGN"); 
} break;

case YYr74: {	/* expression :  assignment_expression */
#line 208 "cgrammer.y"
DisplayProd(" expression -> assignment_expressio"); 
} break;

case YYr75: {	/* expression :  expression ',' assignment_expression */
#line 209 "cgrammer.y"
DisplayProd(" expression -> expression ',' assignment_expression"); 
} break;

case YYr76: {	/* constant_expression :  conditional_expression */
#line 213 "cgrammer.y"
DisplayProd(" constant_expression -> conditional_expression"); 
} break;

case YYr77: {	/* declaration :  declaration_specifiers ';' */
#line 217 "cgrammer.y"
 ClrIdList(); DisplayProd(" declaration -> declaration_specifiers ';'"); 
} break;

case YYr78: {	/* declaration :  declaration_specifiers init_declarator_list ';' */
#line 218 "cgrammer.y"
 UpdateTypeNames(yypvt[-2]); DisplayProd(" declaration -> declaration_specifiers init_declarator_list ';'"); 
} break;

case YYr79: {	/* declaration :  declaration_specifiers attribute_specifiers ';' */
#line 219 "cgrammer.y"
 UpdateTypeNames(yypvt[-2]); DisplayProd(" declaration -> declaration_specifiers attribute_specifiers ';'"); 
} break;

case YYr80: {	/* declaration :  declaration_specifiers init_declarator_list attribute_specifiers ';' */
#line 220 "cgrammer.y"
 UpdateTypeNames(yypvt[-3]); DisplayProd(" declaration -> declaration_specifiers init_declarator_list attribute_specifiers ';'"); 
} break;

case YYr81: {	/* declaration_specifiers :  storage_class_specifier */
#line 224 "cgrammer.y"
 yyval = -1; DisplayProd(" declaration_specifiers -> storage_class_specifier"); 
} break;

case YYr82: {	/* declaration_specifiers :  storage_class_specifier declaration_specifiers */
#line 225 "cgrammer.y"
 yyval = yypvt[-1]; DisplayProd(" declaration_specifiers -> storage_class_specifier declaration_specifiers"); 
} break;

case YYr83: {	/* declaration_specifiers :  type_specifier */
#line 226 "cgrammer.y"
 yyval = yypvt[0]; DisplayProd(" declaration_specifiers -> type_specifier"); 
} break;

case YYr84: {	/* declaration_specifiers :  type_specifier declaration_specifiers */
#line 227 "cgrammer.y"
 yyval = yypvt[0]; DisplayProd(" declaration_specifiers -> type_specifier declaration_specifiers"); 
} break;

case YYr85: {	/* declaration_specifiers :  type_qualifier */
#line 228 "cgrammer.y"
 yyval = -1; DisplayProd(" declaration_specifiers -> type_qualifier"); 
} break;

case YYr86: {	/* declaration_specifiers :  type_qualifier declaration_specifiers */
#line 229 "cgrammer.y"
 yyval = -1; DisplayProd(" declaration_specifiers -> type_qualifier declaration_specifiers	"); 
} break;

case YYr87: {	/* declaration_specifiers :  function_specifier */
#line 230 "cgrammer.y"
 yyval = -1; DisplayProd(" declaration_specifiers -> function_specifier"); 
} break;

case YYr88: {	/* declaration_specifiers :  function_specifier declaration_specifiers */
#line 231 "cgrammer.y"
 yyval = -1; DisplayProd(" declaration_specifiers -> function_specifier declaration_specifiers"); 
} break;

case YYr89: {	/* init_declarator_list :  init_declarator */
#line 235 "cgrammer.y"
 AddIdToList(yypvt[0]); DisplayProd(" init_declarator_list -> init_declarator"); 
} break;

case YYr90: {	/* init_declarator_list :  init_declarator_list ',' init_declarator */
#line 236 "cgrammer.y"
 AddIdToList(yypvt[0]); DisplayProd(" init_declarator_list -> init_declarator_list ',' init_declarator"); 
} break;

case YYr91: {	/* init_declarator :  declarator */
#line 240 "cgrammer.y"
yyval=yypvt[0]; DisplayProd(" init_declarator -> declarator"); 
} break;

case YYr92: {	/* init_declarator :  declarator '=' initializer */
#line 241 "cgrammer.y"
yyval=yypvt[-2]; DisplayProd(" init_declarator -> declarator '=' initializer"); 
} break;

case YYr93: {	/* storage_class_specifier :  TYPEDEF */
#line 245 "cgrammer.y"
 DisplayLexeme(yypvt[0]); yyval = yypvt[0];  DisplayProd(" storage_class_specifier -> TYPEDEF"); 
} break;

case YYr94: {	/* storage_class_specifier :  EXTERN */
#line 246 "cgrammer.y"
yyval = yypvt[0]; DisplayProd(" storage_class_specifier -> EXTERN"); 
} break;

case YYr95: {	/* storage_class_specifier :  STATIC */
#line 247 "cgrammer.y"
yyval = yypvt[0]; DisplayProd(" storage_class_specifier -> STATIC"); 
} break;

case YYr96: {	/* storage_class_specifier :  AUTO */
#line 248 "cgrammer.y"
yyval = yypvt[0]; DisplayProd(" storage_class_specifier -> AUTO"); 
} break;

case YYr97: {	/* storage_class_specifier :  REGISTER */
#line 249 "cgrammer.y"
yyval = yypvt[0]; DisplayProd(" storage_class_specifier -> REGISTER"); 
} break;

case YYr98: {	/* type_specifier :  VOID */
#line 253 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> VOID"); 
} break;

case YYr99: {	/* type_specifier :  CHAR */
#line 254 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> CHAR"); 
} break;

case YYr100: {	/* type_specifier :  SHORT */
#line 255 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> SHORT"); 
} break;

case YYr101: {	/* type_specifier :  INT */
#line 256 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> INT"); 
} break;

case YYr102: {	/* type_specifier :  LONG */
#line 257 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> LONG"); 
} break;

case YYr103: {	/* type_specifier :  FLOAT */
#line 258 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> FLOAT"); 
} break;

case YYr104: {	/* type_specifier :  DOUBLE */
#line 259 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> DOUBLEF"); 
} break;

case YYr105: {	/* type_specifier :  SIGNED */
#line 260 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> SIGNED"); 
} break;

case YYr106: {	/* type_specifier :  UNSIGNED */
#line 261 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> UNSIGNED"); 
} break;

case YYr107: {	/* type_specifier :  BOOL */
#line 262 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> BOOL"); 
} break;

case YYr108: {	/* type_specifier :  COMPLEX */
#line 263 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> COMPLEX"); 
} break;

case YYr109: {	/* type_specifier :  IMAGINARY */
#line 264 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> IMAGINARY"); 
} break;

case YYr110: {	/* type_specifier :  struct_or_union_specifier */
#line 265 "cgrammer.y"
 yyval=GetSymbol(UNION_STRUCT); DisplayProd(" type_specifier -> struct_or_union_specifier"); 
} break;

case YYr111: {	/* type_specifier :  enum_specifier */
#line 266 "cgrammer.y"
 yyval=GetSymbol(ENUM); DisplayProd(" type_specifier -> enum_specifier"); 
} break;

case YYr112: {	/* type_specifier :  TYPE_NAME */
#line 267 "cgrammer.y"
 yyval=yypvt[0]; DisplayProd(" type_specifier -> TYPE_NAME"); 
} break;

case YYr113: {	/* struct_or_union_specifier :  struct_or_union IDENTIFIER '{' struct_declaration_list '}' */
#line 272 "cgrammer.y"
	
																		DisplayProd(" struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'"); 
																	
} break;

case YYr114: {	/* struct_or_union_specifier :  struct_or_union '{' struct_declaration_list '}' */
#line 275 "cgrammer.y"

																		DisplayProd(" struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'"); 
																	
} break;

case YYr115: {	/* struct_or_union_specifier :  struct_or_union IDENTIFIER */
#line 278 "cgrammer.y"
		
																		DisplayProd(" struct_or_union_specifier -> struct_or_union IDENTIFIER"); 
																	
} break;

case YYr116: {	/* attribute_specifiers :  attribute_specifier '(' primary_expression ')' */
#line 285 "cgrammer.y"
DisplayProd(" attribute_specifier '(' primary_expression ')' "); 
} break;

case YYr117: {	/* attribute_specifier :  ATTRIBUTE */
#line 290 "cgrammer.y"
DisplayProd(" attribute_specifier -> ATTRIBUTE"); 
} break;

case YYr118: {	/* struct_or_union :  STRUCT */
#line 294 "cgrammer.y"
DisplayProd(" struct_or_union -> STRUCT"); 
} break;

case YYr119: {	/* struct_or_union :  UNION */
#line 295 "cgrammer.y"
DisplayProd(" struct_or_union -> UNION"); 
} break;

case YYr120: {	/* struct_declaration_list :  struct_declaration */
#line 299 "cgrammer.y"
DisplayProd(" struct_declaration_list -> struct_declaration"); 
} break;

case YYr121: {	/* struct_declaration_list :  struct_declaration_list struct_declaration */
#line 300 "cgrammer.y"
DisplayProd(" struct_declaration_list -> struct_declaration_list struct_declaration"); 
} break;

case YYr122: {	/* struct_declaration_list :  anonymous_union */
#line 301 "cgrammer.y"
DisplayProd(" *** anonymoous_union -> struct_declaration ***"); 
} break;

case YYr123: {	/* struct_declaration_list :  struct_declaration_list anonymous_union */
#line 302 "cgrammer.y"
DisplayProd(" *** struct_declaration_list -> struct_declaration_list anonymous_union ***"); 
} break;

case YYr124: {	/* anonymous_union :  specifier_qualifier_list ';' */
#line 306 "cgrammer.y"
DisplayProd(" *** tfl -- anonymous unions:  anonymous_union -> specifier_qualifier_list ';' ***"); 
} break;

case YYr125: {	/* struct_declaration :  specifier_qualifier_list struct_declarator_list ';' */
#line 310 "cgrammer.y"
DisplayProd(" struct_declaration -> specifier_qualifier_list struct_declarator_list ';'"); 
} break;

case YYr126: {	/* specifier_qualifier_list :  type_specifier specifier_qualifier_list */
#line 314 "cgrammer.y"
DisplayProd(" specifier_qualifier_list -> type_specifier specifier_qualifier_list"); 
} break;

case YYr127: {	/* specifier_qualifier_list :  type_specifier */
#line 315 "cgrammer.y"
DisplayProd(" specifier_qualifier_list -> type_specifier"); 
} break;

case YYr128: {	/* specifier_qualifier_list :  type_qualifier specifier_qualifier_list */
#line 316 "cgrammer.y"
DisplayProd(" specifier_qualifier_list -> type_qualifier specifier_qualifier_list"); 
} break;

case YYr129: {	/* specifier_qualifier_list :  type_qualifier */
#line 317 "cgrammer.y"
DisplayProd(" specifier_qualifier_list -> type_qualifier"); 
} break;

case YYr130: {	/* struct_declarator_list :  struct_declarator */
#line 321 "cgrammer.y"
DisplayProd(" struct_declarator_list -> struct_declarator"); 
} break;

case YYr131: {	/* struct_declarator_list :  struct_declarator_list ',' struct_declarator */
#line 322 "cgrammer.y"
DisplayProd(" struct_declarator_list -> struct_declarator_list ',' struct_declarator"); 
} break;

case YYr132: {	/* struct_declarator :  declarator */
#line 326 "cgrammer.y"
DisplayProd(" struct_declarator -> declarator");
} break;

case YYr133: {	/* struct_declarator :  ':' constant_expression */
#line 327 "cgrammer.y"
DisplayProd(" struct_declarator -> ':' constant_expression");
} break;

case YYr134: {	/* struct_declarator :  declarator ':' constant_expression */
#line 328 "cgrammer.y"
DisplayProd(" struct_declarator -> declarator ':' constant_expression");
} break;

case YYr135: {	/* enum_specifier :  ENUM '{' enumerator_list '}' */
#line 332 "cgrammer.y"
DisplayProd(" enum_specifier -> ENUM '{' enumerator_list '}'"); 
} break;

case YYr136: {	/* enum_specifier :  ENUM IDENTIFIER '{' enumerator_list '}' */
#line 333 "cgrammer.y"
 SetTypeName(yypvt[-3]); DisplayProd(" enum_specifier -> ENUM IDENTIFIER '{' enumerator_list '}'"); 
} break;

case YYr137: {	/* enum_specifier :  ENUM '{' enumerator_list ',' '}' */
#line 334 "cgrammer.y"
DisplayProd(" enum_specifier -> ENUM '{' enumerator_list ',' '}'"); 
} break;

case YYr138: {	/* enum_specifier :  ENUM IDENTIFIER '{' enumerator_list ',' '}' */
#line 335 "cgrammer.y"
 SetTypeName(yypvt[-4]); DisplayProd(" enum_specifier -> ENUM IDENTIFIER '{' enumerator_list ',' '}"); 
} break;

case YYr139: {	/* enum_specifier :  ENUM IDENTIFIER */
#line 336 "cgrammer.y"
 SetTypeName(yypvt[0]); DisplayProd(" enum_specifier -> ENUM IDENTIFIER"); 
} break;

case YYr140: {	/* enumerator_list :  enumerator */
#line 340 "cgrammer.y"
DisplayProd(" enumerator_list -> enumerator"); 
} break;

case YYr141: {	/* enumerator_list :  enumerator_list ',' enumerator */
#line 341 "cgrammer.y"
DisplayProd(" enumerator_list -> enumerator_list ',' enumerator"); 
} break;

case YYr142: {	/* enumerator :  IDENTIFIER */
#line 345 "cgrammer.y"
DisplayProd(" enumerator -> IDENTIFIER"); 
} break;

case YYr143: {	/* enumerator :  IDENTIFIER '=' constant_expression */
#line 346 "cgrammer.y"
DisplayProd(" enumerator -> IDENTIFIER '=' constant_expression"); 
} break;

case YYr144: {	/* type_qualifier :  CONST */
#line 350 "cgrammer.y"
DisplayProd(" type_qualifier -> CONST"); 
} break;

case YYr145: {	/* type_qualifier :  RESTRICT */
#line 351 "cgrammer.y"
DisplayProd(" type_qualifier -> RESTRICT"); 
} break;

case YYr146: {	/* type_qualifier :  VOLATILE */
#line 352 "cgrammer.y"
DisplayProd(" type_qualifier -> VOLATILE"); 
} break;

case YYr147: {	/* function_specifier :  INLINE */
#line 356 "cgrammer.y"
DisplayProd(" function_specifier -> INLINE"); 
} break;

case YYr148: {	/* declarator :  pointer direct_declarator */
#line 360 "cgrammer.y"
yyval = yypvt[0]; DisplayProd(" declarator -> pointer direct_declarator"); 
} break;

case YYr149: {	/* declarator :  direct_declarator */
#line 361 "cgrammer.y"
yyval = yypvt[0]; DisplayProd(" declarator -> direct_declarator"); 
} break;

case YYr150: {	/* direct_declarator :  IDENTIFIER */
#line 366 "cgrammer.y"
yyval=yypvt[0]; DisplayProd(" direct_declarator -> IDENTIFIER"); lastSym = yypvt[0];
} break;

case YYr151: {	/* direct_declarator :  '(' declarator ')' */
#line 367 "cgrammer.y"
yyval=yypvt[-1]; DisplayProd(" direct_declarator -> '(' declarator ')'"); 
} break;

case YYr152: {	/* direct_declarator :  direct_declarator '[' type_qualifier_list assignment_expression ']' */
#line 368 "cgrammer.y"
yyval=yypvt[-4]; DisplayProd(" direct_declarator -> direct_declarator '[' type_qualifier_list assignment_expression ']'"); 
} break;

case YYr153: {	/* direct_declarator :  direct_declarator '[' type_qualifier_list ']' */
#line 369 "cgrammer.y"
yyval=yypvt[-3]; DisplayProd(" direct_declarator -> direct_declarator '[' type_qualifier_list ']'"); 
} break;

case YYr154: {	/* direct_declarator :  direct_declarator '[' assignment_expression ']' */
#line 370 "cgrammer.y"
yyval=yypvt[-3]; DisplayProd(" direct_declarator -> direct_declarator '[' assignment_expression ']'"); 
} break;

case YYr155: {	/* direct_declarator :  direct_declarator '[' STATIC type_qualifier_list assignment_expression ']' */
#line 371 "cgrammer.y"
yyval=yypvt[-5]; DisplayProd(" direct_declarator -> direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'"); 
} break;

case YYr156: {	/* direct_declarator :  direct_declarator '[' type_qualifier_list STATIC assignment_expression ']' */
#line 372 "cgrammer.y"
yyval=yypvt[-5]; DisplayProd(" direct_declarator -> direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'"); 
} break;

case YYr157: {	/* direct_declarator :  direct_declarator '[' type_qualifier_list '*' ']' */
#line 373 "cgrammer.y"
yyval=yypvt[-4]; DisplayProd(" direct_declarator -> direct_declarator '[' type_qualifier_list '*' ']'"); 
} break;

case YYr158: {	/* direct_declarator :  direct_declarator '[' '*' ']' */
#line 374 "cgrammer.y"
yyval=yypvt[-3]; DisplayProd(" direct_declarator -> direct_declarator '[' '*' ']'"); 
} break;

case YYr159: {	/* direct_declarator :  direct_declarator '[' ']' */
#line 375 "cgrammer.y"
yyval=yypvt[-2]; DisplayProd(" direct_declarator -> direct_declarator '[' ']'"); 
} break;

case YYr160: {	/* direct_declarator :  direct_declarator '(' parameter_type_list ')' */
#line 376 "cgrammer.y"
yyval=yypvt[-3]; DisplayProd(" direct_declarator -> direct_declarator '(' parameter_type_list ')'"); 
} break;

case YYr161: {	/* direct_declarator :  direct_declarator '(' identifier_list ')' */
#line 377 "cgrammer.y"
yyval=yypvt[-3]; DisplayProd(" direct_declarator -> direct_declarator '(' identifier_list ')'"); 
} break;

case YYr162: {	/* direct_declarator :  direct_declarator '(' ')' */
#line 378 "cgrammer.y"
yyval=yypvt[-2]; DisplayProd(" direct_declarator -> direct_declarator '(' ')'"); 
} break;

case YYr163: {	/* pointer :  '*' */
#line 382 "cgrammer.y"
DisplayProd(" pointer -> '*'"); 
} break;

case YYr164: {	/* pointer :  '*' type_qualifier_list */
#line 383 "cgrammer.y"
DisplayProd(" pointer -> '*' type_qualifier_list"); 
} break;

case YYr165: {	/* pointer :  '*' pointer */
#line 384 "cgrammer.y"
DisplayProd(" pointer -> '*' pointer"); 
} break;

case YYr166: {	/* pointer :  '*' type_qualifier_list pointer */
#line 385 "cgrammer.y"
DisplayProd(" pointer -> '*' type_qualifier_list pointer"); 
} break;

case YYr167: {	/* type_qualifier_list :  type_qualifier */
#line 389 "cgrammer.y"
DisplayProd(" type_qualifier_list -> type_qualifier"); 
} break;

case YYr168: {	/* type_qualifier_list :  type_qualifier_list type_qualifier */
#line 390 "cgrammer.y"
DisplayProd(" type_qualifier_list -> type_qualifier_list type_qualifier"); 
} break;

case YYr169: {	/* parameter_type_list :  parameter_list */
#line 395 "cgrammer.y"
DisplayProd(" parameter_type_list -> parameter_list"); 
} break;

case YYr170: {	/* parameter_type_list :  parameter_list ',' ELLIPSIS */
#line 396 "cgrammer.y"
DisplayProd(" parameter_type_list -> parameter_list ',' ELLIPSIS"); 
} break;

case YYr171: {	/* parameter_list :  parameter_declaration */
#line 400 "cgrammer.y"
DisplayProd(" parameter_list -> parameter_declaration"); 
} break;

case YYr172: {	/* parameter_list :  parameter_list ',' parameter_declaration */
#line 401 "cgrammer.y"
DisplayProd(" parameter_list -> parameter_list ',' parameter_declaration"); 
} break;

case YYr173: {	/* parameter_declaration :  declaration_specifiers declarator */
#line 405 "cgrammer.y"
DisplayProd(" parameter_declaration -> declaration_specifiers declarator"); 
} break;

case YYr174: {	/* parameter_declaration :  declaration_specifiers abstract_declarator */
#line 406 "cgrammer.y"
DisplayProd(" parameter_declaration -> declaration_specifiers abstract_declarato"); 
} break;

case YYr175: {	/* parameter_declaration :  declaration_specifiers */
#line 407 "cgrammer.y"
DisplayProd(" parameter_declaration -> declaration_specifiers"); 
} break;

case YYr176: {	/* identifier_list :  IDENTIFIER */
#line 411 "cgrammer.y"
DisplayProd(" identifier_list -> IDENTIFIER"); 
} break;

case YYr177: {	/* identifier_list :  identifier_list ',' IDENTIFIER */
#line 412 "cgrammer.y"
DisplayProd(" identifier_list -> identifier_list ',' IDENTIFIER"); 
} break;

case YYr178: {	/* type_name :  specifier_qualifier_list */
#line 416 "cgrammer.y"
DisplayProd(" type_name -> specifier_qualifier_list"); 
} break;

case YYr179: {	/* type_name :  specifier_qualifier_list abstract_declarator */
#line 417 "cgrammer.y"
DisplayProd(" type_name -> specifier_qualifier_list abstract_declarator"); 
} break;

case YYr180: {	/* abstract_declarator :  pointer */
#line 421 "cgrammer.y"
DisplayProd(" abstract_declarator -> pointer"); 
} break;

case YYr181: {	/* abstract_declarator :  direct_abstract_declarator */
#line 422 "cgrammer.y"
DisplayProd(" abstract_declarator -> direct_abstract_declarator"); 
} break;

case YYr182: {	/* abstract_declarator :  pointer direct_abstract_declarator */
#line 423 "cgrammer.y"
DisplayProd(" abstract_declarator -> pointer direct_abstract_declarator"); 
} break;

case YYr183: {	/* direct_abstract_declarator :  '(' abstract_declarator ')' */
#line 427 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> '(' abstract_declarator ')'"); 
} break;

case YYr184: {	/* direct_abstract_declarator :  '[' ']' */
#line 428 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> '[' ']'"); 
} break;

case YYr185: {	/* direct_abstract_declarator :  '[' assignment_expression ']' */
#line 429 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> '[' assignment_expression ']'"); 
} break;

case YYr186: {	/* direct_abstract_declarator :  direct_abstract_declarator '[' ']' */
#line 430 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> direct_abstract_declarator '[' ']'"); 
} break;

case YYr187: {	/* direct_abstract_declarator :  direct_abstract_declarator '[' assignment_expression ']' */
#line 431 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> direct_abstract_declarator '[' assignment_expression ']'"); 
} break;

case YYr188: {	/* direct_abstract_declarator :  '[' '*' ']' */
#line 432 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> '[' '*' ']'"); 
} break;

case YYr189: {	/* direct_abstract_declarator :  direct_abstract_declarator '[' '*' ']' */
#line 433 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> direct_abstract_declarator '[' '*' ']'"); 
} break;

case YYr190: {	/* direct_abstract_declarator :  '(' ')' */
#line 434 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> '(' ')'"); 
} break;

case YYr191: {	/* direct_abstract_declarator :  '(' parameter_type_list ')' */
#line 435 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> '(' parameter_type_list ')'"); 
} break;

case YYr192: {	/* direct_abstract_declarator :  direct_abstract_declarator '(' ')' */
#line 436 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> direct_abstract_declarator '(' ')'"); 
} break;

case YYr193: {	/* direct_abstract_declarator :  direct_abstract_declarator '(' parameter_type_list ')' */
#line 437 "cgrammer.y"
DisplayProd(" direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'"); 
} break;

case YYr194: {	/* initializer :  assignment_expression */
#line 441 "cgrammer.y"
DisplayProd(" initializer -> assignment_expression"); 
} break;

case YYr195: {	/* initializer :  '{' initializer_list '}' */
#line 442 "cgrammer.y"
DisplayProd(" initializer -> '{' initializer_list '}'"); 
} break;

case YYr196: {	/* initializer :  '{' initializer_list ',' '}' */
#line 443 "cgrammer.y"
DisplayProd(" initializer -> '{' initializer_list ',' '}'"); 
} break;

case YYr197: {	/* initializer_list :  initializer */
#line 447 "cgrammer.y"
DisplayProd(" initializer_list -> initializer"); 
} break;

case YYr198: {	/* initializer_list :  designation initializer */
#line 448 "cgrammer.y"
DisplayProd(" initializer_list -> designation initializer"); 
} break;

case YYr199: {	/* initializer_list :  initializer_list ',' initializer */
#line 449 "cgrammer.y"
DisplayProd(" initializer_list -> initializer_list ',' initializer"); 
} break;

case YYr200: {	/* initializer_list :  initializer_list ',' designation initializer */
#line 450 "cgrammer.y"
DisplayProd(" initializer_list -> initializer_list ',' designation initializer"); 
} break;

case YYr201: {	/* designation :  designator_list '=' */
#line 454 "cgrammer.y"
DisplayProd(" designation -> designator_list '='"); 
} break;

case YYr202: {	/* designator_list :  designator */
#line 458 "cgrammer.y"
DisplayProd(" designator_list -> designator"); 
} break;

case YYr203: {	/* designator_list :  designator_list designator */
#line 459 "cgrammer.y"
DisplayProd(" designator_list -> designator_list designator"); 
} break;

case YYr204: {	/* designator :  '[' constant_expression ']' */
#line 463 "cgrammer.y"
DisplayProd(" designator -> '[' constant_expression ']'"); 
} break;

case YYr205: {	/* designator :  '.' IDENTIFIER */
#line 464 "cgrammer.y"
DisplayProd(" designator -> '.' IDENTIFIER"); 
} break;

case YYr206: {	/* statement :  labeled_statement */
#line 468 "cgrammer.y"
DisplayProd(" statement -> labeled_statement"); 
} break;

case YYr207: {	/* statement :  compound_statement */
#line 469 "cgrammer.y"
DisplayProd(" statement -> compound_statement"); 
} break;

case YYr208: {	/* statement :  expression_statement */
#line 470 "cgrammer.y"
DisplayProd(" statement -> expression_statement"); 
} break;

case YYr209: {	/* statement :  selection_statement */
#line 471 "cgrammer.y"
DisplayProd(" statement -> selection_statement"); 
} break;

case YYr210: {	/* statement :  iteration_statement */
#line 472 "cgrammer.y"
DisplayProd(" statementr -> iteration_statement"); 
} break;

case YYr211: {	/* statement :  jump_statement */
#line 473 "cgrammer.y"
DisplayProd(" statement -> jump_statement"); 
} break;

case YYr212: {	/* labeled_statement :  IDENTIFIER ':' statement */
#line 477 "cgrammer.y"
DisplayProd(" labeled_statement -> IDENTIFIER ':' statement"); 
} break;

case YYr213: {	/* labeled_statement :  CASE constant_expression ':' statement */
#line 478 "cgrammer.y"
DisplayProd(" labeled_statement -> CASE constant_expression ':' statement"); 
} break;

case YYr214: {	/* labeled_statement :  DEFAULT ':' statement */
#line 479 "cgrammer.y"
DisplayProd(" labeled_statement -> DEFAULT ':' statement"); 
} break;

case YYr215: {	/* compound_statement :  '{' '}' */
#line 483 "cgrammer.y"
DisplayProd(" compound_statement -> '{' '}'"); 
} break;

case YYr216: {	/* compound_statement :  '{' block_item_list '}' */
#line 484 "cgrammer.y"
DisplayProd(" compound_statement -> '{' block_item_list '}'"); 
} break;

case YYr217: {	/* block_item_list :  block_item */
#line 488 "cgrammer.y"
DisplayProd(" block_item_list -> block_item"); 
} break;

case YYr218: {	/* block_item_list :  block_item_list block_item */
#line 489 "cgrammer.y"
DisplayProd(" block_item_list -> block_item_list block_item"); 
} break;

case YYr219: {	/* block_item :  declaration */
#line 493 "cgrammer.y"
DisplayProd(" block_item -> declaration"); 
} break;

case YYr220: {	/* block_item :  statement */
#line 494 "cgrammer.y"
DisplayProd(" block_item -> statement"); 
} break;

case YYr221: {	/* expression_statement :  ';' */
#line 498 "cgrammer.y"
DisplayProd(" expression_statement -> ';'"); 
} break;

case YYr222: {	/* expression_statement :  expression ';' */
#line 499 "cgrammer.y"
DisplayProd(" expression_statement -> expression ';'"); 
} break;

case YYr223: {	/* selection_statement :  IF '(' expression ')' statement */
#line 503 "cgrammer.y"
DisplayProd(" selection_statement -> IF '(' expression ')' statement"); 
} break;

case YYr224: {	/* selection_statement :  IF '(' expression ')' statement ELSE statement */
#line 504 "cgrammer.y"
DisplayProd(" selection_statement -> IF '(' expression ')' statement ELSE statement"); 
} break;

case YYr225: {	/* selection_statement :  SWITCH '(' expression ')' statement */
#line 505 "cgrammer.y"
DisplayProd(" selection_statement -> SWITCH '(' expression ')' statement"); 
} break;

case YYr226: {	/* iteration_statement :  WHILE '(' expression ')' statement */
#line 509 "cgrammer.y"
DisplayProd(" iteration_statement -> WHILE '(' expression ')' statement"); 
} break;

case YYr227: {	/* iteration_statement :  DO statement WHILE '(' expression ')' ';' */
#line 510 "cgrammer.y"
DisplayProd(" iteration_statement -> DO statement WHILE '(' expression ')' ';'"); 
} break;

case YYr228: {	/* iteration_statement :  FOR '(' expression_statement expression_statement ')' statement */
#line 511 "cgrammer.y"
DisplayProd(" iteration_statement -> FOR '(' expression_statement expression_statement ')' statement"); 
} break;

case YYr229: {	/* iteration_statement :  FOR '(' expression_statement expression_statement expression ')' statement */
#line 512 "cgrammer.y"
DisplayProd(" iteration_statement -> FOR '(' expression_statement expression_statement expression ')' statement"); 
} break;

case YYr230: {	/* iteration_statement :  FOR '(' declaration expression_statement ')' statement */
#line 513 "cgrammer.y"
DisplayProd(" iteration_statement -> FOR '(' declaration expression_statement ')' statement"); 
} break;

case YYr231: {	/* iteration_statement :  FOR '(' declaration expression_statement expression ')' statement */
#line 514 "cgrammer.y"
DisplayProd(" iteration_statement -> FOR '(' declaration expression_statement expression ')' statement"); 
} break;

case YYr232: {	/* jump_statement :  GOTO IDENTIFIER ';' */
#line 518 "cgrammer.y"
DisplayProd(" jump_statement -> GOTO IDENTIFIER ';'"); 
} break;

case YYr233: {	/* jump_statement :  CONTINUE ';' */
#line 519 "cgrammer.y"
DisplayProd(" jump_statement -> CONTINUE ';'"); 
} break;

case YYr234: {	/* jump_statement :  BREAK ';' */
#line 520 "cgrammer.y"
DisplayProd(" jump_statement -> BREAK ';'"); 
} break;

case YYr235: {	/* jump_statement :  RETURN ';' */
#line 521 "cgrammer.y"
DisplayProd(" jump_statement -> RETURN ';'"); 
} break;

case YYr236: {	/* jump_statement :  RETURN expression ';' */
#line 522 "cgrammer.y"
DisplayProd(" jump_statement -> RETURN expression ';'"); 
} break;

case YYr237: {	/* translation_unit :  external_declaration */
#line 526 "cgrammer.y"
 ClrIdList(); DisplayProd(" translation_unit -> external_declaration"); 
} break;

case YYr238: {	/* translation_unit :  translation_unit external_declaration */
#line 527 "cgrammer.y"
 ClrIdList(); DisplayProd(" translation_unit -> translation_unit external_declaration"); 
} break;

case YYr239: {	/* external_declaration :  function_definition */
#line 531 "cgrammer.y"
DisplayProd(" external_declaration -> function_definition"); 
} break;

case YYr240: {	/* external_declaration :  declaration */
#line 532 "cgrammer.y"
DisplayProd(" external_declaration -> declaration"); 
} break;

case YYr241: {	/* function_definition :  declaration_specifiers declarator declaration_list compound_statement */
#line 536 "cgrammer.y"
DisplayProd(" function_definition -> declaration_specifiers declarator declaration_list compound_statement"); 
} break;

case YYr242: {	/* function_definition :  declaration_specifiers declarator compound_statement */
#line 537 "cgrammer.y"
DisplayProd(" function_definition -> declaration_specifiers declarator compound_statement"); 
} break;

case YYr243: {	/* declaration_list :  declaration */
#line 541 "cgrammer.y"
DisplayProd(" declaration_list -> declaration"); 
} break;

case YYr244: {	/* declaration_list :  declaration_list declaration */
#line 542 "cgrammer.y"
DisplayProd(" declaration_list -> declaration_list declaration"); 
} break;
#line 343 "C:/Program Files/Mortice Kern Systems/Lex and Yacc/etc/yyparse.cpp"
	case YYrACCEPT:
		YYACCEPT;
	case YYrERROR:
		goto yyError;
	}
yyNext:
	/*
	 *	Look up next state in goto table.
	 */

	yyp = &yygo[yypgo[yyi]];
	yyq = yyp++;
	yyi = *yyps;
	while (yyi < *yyp++)		/* busy little loop */
		;
	yystate = yyneg(yyi == *--yyp? yyq[yyq-yyp]: *yyq);
#if YYDEBUG
	if (yydebug)
		YY_TRACE(yyShowGoto)
#endif
	goto yyStack;

yyerrlabel:	;		/* come here from YYERROR	*/
	yyerrflag = 1;
	if (yyi == YYrERROR) {
		yyps--, yypv--;
#if YYDEBUG
		if (yydebug) yytp--;
#endif
	}
	
yyError:
	switch (yyerrflag) {

	case 0:		/* new error */
		yynerrs++;
		yyi = yychar;
		scan->yyerror("Syntax error");
		if (yyi != yychar) {
			/* user has changed the current token */
			/* try again */
			yyerrflag++;	/* avoid loops */
			goto yyEncore;
		}

	case 1:		/* partially recovered */
	case 2:
		yyerrflag = 3;	/* need 3 valid shifts to recover */
			
		/*
		 *	Pop states, looking for a
		 *	shift on `error'.
		 */

		for ( ; yyps > stateStack; yyps--, yypv--
#if YYDEBUG
					, yytp--
#endif
		) {
#ifdef YACC_WINDOWS
			if (*yyps >= Sizeof_yypact) 	/* simple state */
#else /* YACC_WINDOWS */
			if (*yyps >= sizeof yypact/sizeof yypact[0])
#endif /* YACC_WINDOWS */
				continue;
			yyp = &yyact[yypact[*yyps]];
			yyq = yyp;
			do
				;
			while (YYERRCODE < *yyp++);
			if (YYERRCODE == yyp[-1]) {
				yystate = yyneg(yyq[yyq-yyp]);
				goto yyStack;
			}
				
			/* no shift in this state */
#if YYDEBUG
			if (yydebug && yyps > stateStack+1)
				YY_TRACE(yyShowErrRecovery)
#endif
			/* pop stacks; try again */
		}
		/* no shift on error - abort */
		break;

	case 3:
		/*
		 *	Erroneous token after
		 *	an error - discard it.
		 */

		if (yychar == 0)  /* but not EOF */
			break;
#if YYDEBUG
		if (yydebug)
			YY_TRACE(yyShowErrDiscard)
#endif
		yyclearin();
		goto yyEncore;	/* try again in same state */
	}
	YYABORT;

}
#if YYDEBUG
/*
 * Return type of token
 */
int
yy_parse::yyGetType(int tok)
{
	yyNamedType * tp;
	for (tp = &yyTokenTypes[yyntoken-1]; tp > yyTokenTypes; tp--)
		if (tp->token == tok)
			return tp->type;
	return 0;
}

	
// Print a token legibly.
char *
yy_parse::yyptok(int tok)
{
	yyNamedType * tp;
	for (tp = &yyTokenTypes[yyntoken-1]; tp > yyTokenTypes; tp--)
		if (tp->token == tok)
			return tp->name;
	return "";
}
/*
 * Read state 'num' from YYStatesFile
 */
#ifdef YYTRACE

char *
yy_parse::yygetState(int num)
{
	int	size;
	char	*cp;
	static FILE *yyStatesFile = (FILE *) 0;
	static char yyReadBuf[YYMAX_READ+1];

	if (yyStatesFile == (FILE *) 0
	 && (yyStatesFile = fopen(YYStatesFile, "r")) == (FILE *) 0)
		return "yyExpandName: cannot open states file";

	if (num < yynstate - 1)
		size = (int)(States[num+1] - States[num]);
	else {
		/* length of last item is length of file - ptr(last-1) */
		if (fseek(yyStatesFile, 0L, 2) < 0)
			goto cannot_seek;
		size = (int) (ftell(yyStatesFile) - States[num]);
	}
	if (size < 0 || size > YYMAX_READ)
		return "yyExpandName: bad read size";
	if (fseek(yyStatesFile, States[num], 0) < 0) {
	cannot_seek:
		return "yyExpandName: cannot seek in states file";
	}

	(void) fread(yyReadBuf, 1, size, yyStatesFile);
	yyReadBuf[size] = '\0';
	return yyReadBuf;
}
#endif /* YYTRACE */
/*
 * Expand encoded string into printable representation
 * Used to decode yyStates and yyRules strings.
 * If the expansion of 's' fits in 'buf', return 1; otherwise, 0.
 */
int
yy_parse::yyExpandName(int num, int isrule, char * buf, int len)
{
	int	i, n, cnt, type;
	char	* endp, * cp, * s;

	if (isrule)
		s = yyRules[num].name;
	else
#ifdef YYTRACE
		s = yygetState(num);
#else
		s = "*no states*";
#endif

	for (endp = buf + len - 8; *s; s++) {
		if (buf >= endp) {		/* too large: return 0 */
		full:	(void) strcpy(buf, " ...\n");
			return 0;
		} else if (*s == '%') {		/* nonterminal */
			type = 0;
			cnt = yynvar;
			goto getN;
		} else if (*s == '&') {		/* terminal */
			type = 1;
			cnt = yyntoken;
		getN:
			if (cnt < 100)
				i = 2;
			else if (cnt < 1000)
				i = 3;
			else
				i = 4;
			for (n = 0; i-- > 0; )
				n = (n * 10) + *++s - '0';
			if (type == 0) {
				if (n >= yynvar)
					goto too_big;
				cp = yysvar[n];
			} else if (n >= yyntoken) {
			    too_big:
				cp = "<range err>";
			} else
				cp = yyTokenTypes[n].name;

			if ((i = strlen(cp)) + buf > endp)
				goto full;
			(void) strcpy(buf, cp);
			buf += i;
		} else
			*buf++ = *s;
	}
	*buf = '\0';
	return 1;
}
#ifndef YYTRACE
/*
 * Show current state of yyparse
 */
void
yy_parse::yyShowState()
{
	(void) printf("state %d (%d), char %s (%d)\n%d stateStack entries\n",
		yysmap[yystate],yystate,yyptok(yychar),yychar,
		yypv - valueStack);
}
// show results of reduction: yyi is rule number
void
yy_parse::yyShowReduce()
{
	(void) printf("Reduce by rule %d (pop#=%d)\n", yyrmap[rule], npop);
}
// show read token
void
yy_parse::yyShowRead()
{
	(void) printf("read %s (%d)\n", yyptok(yychar), yychar);
}
// show Goto
void
yy_parse::yyShowGoto()
{
	(void) printf("goto %d (%d)\n", yysmap[yystate], yystate);
}
// show Shift
void
yy_parse::yyShowShift()
{
	(void) printf("shift %d (%d)\n", yysmap[yystate], yystate);
}
// show error recovery
void
yy_parse::yyShowErrRecovery()
{
	(void) printf("Error recovery pops state %d (%d), uncovers %d (%d)\n",
		yysmap[*(yyps-1)], *(yyps-1), yysmap[yystate], yystate);
}
// show token discards in error processing
void
yy_parse::yyShowErrDiscard()
{
	(void) printf("Error recovery discards %s (%d), ",
		yyptok(yychar), yychar);
}
#endif	/* ! YYTRACE */
#endif	/* YYDEBUG */
#line 547 "cgrammer.y"
#include <stdio.h>


//
// display the parser productions generated
//
void DisplayProd(string cs) {

#ifdef DISPLAY_PROD
	parser->DisplayProd(cs);
#endif
}

//
// change this symbol to a TYPE_NAME 
//
void SetTypeName(YYSTYPE sym) {

symbl *pSym = (symbl *)sym;
	
	parser->setTypeName(pSym);
}

//
// add a symbol to the IdList
//
void AddIdToList(YYSTYPE sym) {

symbl *pSym = (symbl *)sym;

	parser->AddIdToList(pSym);
}


//
// clear out the IdList
//
void ClrIdList(void) {
	parser->ClrIdList();
}


//
// update all of the symbols in the IdList to TYPE_NAME
//
void UpdateTypeNames(YYSTYPE tok) {

if ( (tok == -1) || (tok == 0) ) {
	return;
}

	symbl *pSym = (symbl *)tok;
	UINT32 token = pSym->getToken();

	if ( (token == TYPEDEF)) {
		parser->UpdateTypeNames();
		parser->ClrIdList();		
	}
}

//
// get a pointer to a symbol having this token
//
// This is primarily used to find internal tokens
//
YYSTYPE GetSymbol(YYSTYPE tok) {

	UINT32 token = (UINT32)tok;
	symbl *sym = parser->getSymbol(token);

	return (YYSTYPE)sym;	
}


//
// display the lexem for this symbol
//
void DisplayLexeme(YYSTYPE sym) {

string cs;

	if ( (sym == -1) || (sym == 0) ) {
		return;
	}
	symbl *pSym = (symbl *)sym;
	parser->DisplaySymbol(pSym);
}	

















