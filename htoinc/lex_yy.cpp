/* c:/program files/mortice kern systems/lex and yacc\mksnt\lex -o C:\MyCppProjects\htoinc\htoinc\lex_yy.cpp -LC -D C:\MyCppProjects\htoinc\htoinc\lex_yy.hpp cgrammer.l */
#define INITIAL 0
const yy_endst = 372;
const yy_nxtmax = 2259;
#define YY_LA_SIZE 47

static unsigned short yy_la_act[] = {
 92, 100, 2, 100, 41, 100, 41, 100, 41, 100, 41, 100, 41, 100, 41, 100,
 41, 100, 41, 100, 41, 100, 41, 100, 41, 100, 41, 100, 41, 100, 41, 100,
 41, 100, 41, 100, 41, 100, 41, 100, 43, 100, 44, 100, 100, 85, 100, 100,
 95, 100, 94, 100, 90, 100, 89, 100, 91, 100, 93, 100, 86, 100, 96, 100,
 97, 100, 80, 100, 87, 100, 75, 100, 76, 100, 77, 100, 78, 100, 79, 100,
 81, 100, 82, 100, 83, 100, 84, 100, 88, 100, 98, 100, 99, 100, 99, 100,
 84, 74, 73, 63, 70, 62, 61, 69, 60, 77, 58, 57, 67, 68, 56, 66,
 65, 71, 76, 83, 55, 64, 72, 54, 52, 47, 53, 47, 47, 47, 47, 47,
 45, 44, 44, 44, 44, 44, 48, 47, 48, 48, 48, 48, 48, 48, 47, 48,
 47, 48, 47, 48, 47, 48, 47, 48, 46, 46, 46, 46, 46, 44, 44, 44,
 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
 43, 43, 42, 50, 50, 50, 50, 50, 50, 50, 50, 42, 42, 42, 42, 51,
 50, 51, 50, 51, 50, 51, 51, 51, 51, 51, 51, 50, 51, 50, 51, 50,
 51, 50, 51, 50, 51, 50, 51, 50, 51, 49, 49, 49, 49, 49, 42, 42,
 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 39, 41, 41, 41, 41,
 41, 41, 41, 41, 38, 41, 37, 41, 41, 41, 41, 41, 41, 41, 41, 36,
 41, 41, 35, 41, 41, 41, 41, 41, 41, 34, 41, 41, 41, 41, 41, 41,
 41, 41, 33, 41, 41, 41, 41, 41, 32, 41, 41, 41, 31, 41, 41, 41,
 41, 41, 30, 41, 41, 41, 29, 41, 41, 41, 28, 41, 41, 41, 41, 41,
 41, 41, 27, 41, 41, 41, 41, 41, 26, 41, 41, 41, 41, 41, 25, 41,
 41, 41, 24, 41, 20, 41, 41, 41, 23, 41, 41, 41, 22, 41, 41, 41,
 19, 41, 41, 41, 18, 41, 41, 41, 17, 41, 41, 41, 41, 41, 41, 41,
 16, 41, 41, 15, 41, 41, 14, 41, 41, 12, 41, 41, 41, 41, 13, 41,
 41, 41, 41, 41, 11, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 10,
 41, 9, 41, 41, 7, 41, 41, 6, 41, 41, 41, 41, 5, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 40, 41, 41, 41,
 41, 41, 41, 41, 41, 21, 41, 41, 41, 41, 41, 41, 8, 41, 41, 41,
 4, 41, 41, 41, 3, 41, 2, 0, 1, 59, 1, 0
};

static unsigned char yy_look[] = {
 0
};

static short yy_final[] = {
 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
 30, 32, 34, 36, 38, 40, 42, 44, 45, 47, 48, 50, 52, 54, 56, 58,
 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90,
 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 120, 120, 121, 121,
 122, 122, 123, 123, 124, 125, 126, 127, 127, 128, 128, 128, 129, 129, 130, 131,
 132, 133, 134, 134, 135, 137, 137, 138, 139, 140, 141, 141, 142, 142, 144, 146,
 148, 150, 150, 152, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
 164, 165, 165, 166, 167, 168, 169, 170, 170, 171, 172, 173, 174, 175, 176, 177,
 178, 179, 179, 180, 181, 182, 182, 183, 184, 184, 185, 186, 187, 188, 189, 190,
 191, 191, 192, 194, 196, 198, 198, 199, 200, 200, 201, 202, 203, 205, 207, 207,
 209, 211, 211, 213, 215, 217, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
 227, 228, 229, 230, 231, 232, 232, 232, 233, 234, 235, 237, 238, 239, 240, 241,
 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261,
 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279,
 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 300,
 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318,
 320, 321, 322, 324, 326, 327, 328, 330, 331, 332, 334, 335, 336, 338, 339, 340,
 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361,
 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380,
 381, 382, 383, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401,
 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418,
 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438,
 439, 440, 441, 442, 443
};
#ifndef yy_state_t
#define yy_state_t unsigned short
#endif

static yy_state_t yy_begin[] = {
 0, 0, 0
};

static yy_state_t yy_next[] = {
 50, 50, 50, 50, 50, 50, 50, 50, 50, 48, 49, 48, 48, 50, 50, 50,
 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
 48, 36, 25, 2, 50, 31, 32, 23, 42, 43, 30, 28, 40, 29, 24, 1,
 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 41, 37, 27, 35, 26, 47,
 50, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 19, 19,
 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 44, 50, 45, 33, 4,
 50, 3, 5, 6, 7, 8, 9, 10, 19, 11, 19, 19, 12, 19, 19, 19,
 19, 19, 13, 14, 15, 16, 17, 18, 19, 19, 19, 38, 34, 39, 46, 50,
 51, 52, 53, 54, 56, 58, 59, 60, 61, 63, 69, 66, 71, 73, 72, 74,
 81, 372, 372, 372, 372, 372, 372, 372, 372, 62, 64, 372, 57, 65, 372, 70,
 127, 67, 68, 80, 128, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 372,
 372, 142, 143, 372, 372, 372, 372, 372, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 55, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 372, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 372, 87, 372, 87, 372, 193, 88, 88,
 88, 88, 88, 88, 88, 88, 88, 88, 372, 121, 108, 110, 126, 372, 141, 82,
 84, 112, 123, 372, 192, 84, 86, 106, 372, 106, 372, 86, 107, 107, 107, 107,
 107, 107, 107, 107, 107, 107, 194, 372, 124, 372, 108, 109, 125, 139, 140, 82,
 83, 111, 122, 190, 191, 83, 85, 372, 372, 372, 372, 85, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 372, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 372, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 89, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 372, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 89, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 372, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 99, 372, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 100, 100, 100, 100, 100, 100, 100, 100,
 100, 100, 136, 98, 372, 372, 372, 372, 187, 372, 97, 138, 372, 101, 103, 372,
 113, 189, 113, 95, 105, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 103,
 110, 372, 372, 98, 372, 105, 112, 372, 372, 372, 96, 137, 372, 101, 102, 372,
 115, 188, 115, 94, 104, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 102,
 109, 372, 118, 372, 372, 104, 111, 372, 120, 130, 130, 130, 130, 130, 130, 130,
 130, 135, 135, 99, 372, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 372,
 372, 147, 117, 147, 372, 134, 147, 151, 119, 151, 98, 149, 151, 149, 132, 372,
 149, 129, 372, 130, 130, 130, 130, 130, 130, 130, 130, 372, 372, 372, 372, 372,
 372, 148, 372, 148, 372, 133, 148, 150, 372, 150, 98, 149, 150, 149, 131, 134,
 149, 129, 372, 372, 372, 372, 372, 372, 132, 372, 372, 372, 372, 145, 372, 144,
 144, 144, 144, 144, 144, 144, 144, 144, 144, 372, 372, 372, 372, 372, 372, 133,
 144, 144, 144, 144, 144, 144, 372, 372, 131, 146, 146, 146, 146, 146, 146, 146,
 146, 146, 146, 372, 372, 199, 372, 372, 372, 372, 146, 146, 146, 146, 146, 146,
 144, 144, 144, 144, 144, 144, 152, 372, 152, 372, 202, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 153, 161, 372, 207, 372, 372, 146, 146, 146, 146, 146, 146,
 200, 372, 155, 372, 168, 372, 168, 372, 151, 169, 169, 169, 169, 169, 169, 169,
 169, 169, 169, 159, 372, 372, 372, 160, 372, 372, 372, 372, 157, 201, 372, 372,
 372, 203, 154, 372, 177, 372, 177, 372, 150, 178, 178, 178, 178, 178, 178, 178,
 178, 178, 178, 158, 171, 372, 372, 160, 372, 372, 167, 372, 156, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 372, 372, 372, 372, 372, 372, 372, 162, 162,
 162, 162, 162, 163, 170, 172, 172, 372, 372, 167, 166, 176, 176, 165, 372, 174,
 174, 172, 180, 172, 209, 208, 184, 176, 176, 176, 372, 174, 186, 174, 162, 162,
 162, 162, 162, 164, 172, 173, 173, 372, 211, 166, 176, 175, 175, 165, 174, 174,
 174, 173, 179, 173, 372, 372, 183, 175, 175, 175, 372, 174, 185, 174, 372, 372,
 372, 372, 372, 372, 173, 372, 372, 372, 372, 372, 175, 181, 372, 181, 174, 372,
 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 198, 372, 372, 372, 372, 197,
 372, 372, 372, 372, 372, 372, 372, 372, 196, 196, 196, 196, 196, 196, 196, 196,
 196, 196, 372, 372, 206, 372, 372, 372, 372, 195, 195, 195, 195, 195, 195, 195,
 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
 195, 195, 195, 212, 372, 372, 372, 195, 222, 195, 195, 195, 195, 195, 195, 195,
 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
 195, 195, 195, 372, 233, 372, 210, 372, 372, 204, 372, 372, 205, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 213, 372, 215, 372, 372, 372,
 216, 218, 372, 219, 214, 372, 372, 372, 372, 217, 372, 224, 220, 225, 372, 228,
 229, 221, 226, 372, 234, 223, 227, 372, 232, 236, 372, 230, 372, 239, 231, 235,
 372, 372, 372, 372, 372, 372, 243, 372, 372, 372, 237, 242, 244, 372, 238, 240,
 246, 372, 372, 248, 372, 241, 372, 372, 372, 372, 251, 247, 250, 249, 372, 245,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 372, 252, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 253, 372,
 372, 372, 372, 372, 372, 255, 372, 372, 256, 254, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 257, 258, 372, 259, 372, 372, 372, 372, 372, 260, 372, 372,
 261, 372, 372, 265, 372, 372, 372, 264, 372, 372, 372, 372, 372, 372, 372, 372,
 262, 263, 267, 372, 372, 372, 266, 270, 372, 372, 372, 268, 372, 372, 269, 372,
 372, 372, 273, 271, 272, 372, 274, 372, 372, 277, 372, 275, 372, 372, 372, 372,
 372, 278, 279, 276, 281, 372, 372, 372, 372, 280, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 282, 372, 372, 372, 372, 372, 372, 283, 372,
 285, 284, 372, 286, 289, 372, 372, 372, 287, 372, 372, 372, 288, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 290, 295, 372, 372, 372, 291,
 372, 292, 372, 372, 372, 372, 372, 372, 372, 294, 372, 293, 372, 372, 372, 372,
 296, 372, 297, 372, 301, 299, 372, 372, 372, 372, 372, 298, 372, 302, 372, 372,
 372, 300, 305, 372, 372, 372, 372, 303, 372, 307, 372, 304, 372, 372, 309, 306,
 372, 308, 372, 372, 372, 372, 372, 372, 313, 372, 372, 311, 372, 372, 372, 314,
 372, 372, 372, 310, 372, 312, 315, 372, 372, 316, 319, 372, 372, 372, 372, 372,
 372, 317, 318, 320, 322, 372, 372, 372, 372, 324, 372, 372, 372, 321, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 323, 372, 372, 372, 372, 372, 372,
 325, 372, 372, 327, 372, 332, 333, 372, 372, 372, 372, 372, 334, 372, 326, 372,
 329, 372, 372, 372, 372, 372, 330, 328, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 331, 335, 372, 372, 336, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 341, 372, 372, 372, 372, 372, 340, 372, 337, 372, 372, 372, 344, 372, 339,
 338, 345, 372, 372, 372, 342, 372, 346, 372, 372, 343, 372, 348, 347, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 349, 368, 352, 350, 372, 372, 369, 372,
 372, 351, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 370, 372, 353, 372,
 372, 372, 372, 356, 355, 372, 354, 357, 359, 358, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 360, 372, 361, 372, 372, 372, 372,
 363, 362, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 366, 372, 372,
 372, 372, 364, 365, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 372, 367,
 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
 367, 367, 367, 367, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 372, 371,
 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
 371, 371, 371, 371, 0
};

static yy_state_t yy_check[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 41, 36, 35, 34, 33, 32, 31, 31, 30, 29, 27, 28, 67, 26, 26, 72,
 80, 87, 106, 87, 106, 113, 115, 113, 115, 29, 29, 121, 32, 28, 124, 27,
 126, 27, 27, 24, 125, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 136,
 139, 141, 140, 152, 168, 152, 168, 187, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 34, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 75, 75, 75, 75, 75, 75, 75, 75,
 75, 75, 190, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
 75, 75, 75, 75, 75, 75, 75, 75, 79, 82, 88, 82, 88, 192, 82, 82,
 82, 82, 82, 82, 82, 82, 82, 82, 96, 97, 100, 100, 95, 133, 132, 79,
 79, 100, 97, 158, 157, 88, 79, 101, 177, 101, 177, 88, 101, 101, 101, 101,
 101, 101, 101, 101, 101, 101, 191, 181, 96, 181, 100, 100, 95, 133, 132, 79,
 79, 100, 97, 158, 157, 88, 79, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 88, 23, 23, 23, 23,
 23, 23, 23, 23, 23, 23, (yy_state_t)~0, 23, 23, 23, 23, 23, 23, 23, 23, 23,
 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
 23, 23, 23, (yy_state_t)~0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, (yy_state_t)~0, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89,
 89, 89, 89, 89, 89, 89, (yy_state_t)~0, 89, 89, 89, 89, 89, 89, 89, 89, 89,
 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 22, (yy_state_t)~0, 22, 22,
 22, 22, 22, 22, 22, 22, 22, 22, 99, 99, 99, 99, 99, 99, 99, 99,
 99, 99, 134, 22, 107, 114, 107, 114, 159, (yy_state_t)~0, 22, 134, (yy_state_t)~0, 99, 99, (yy_state_t)~0,
 108, 159, 108, 22, 99, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 107,
 114, (yy_state_t)~0, (yy_state_t)~0, 22, (yy_state_t)~0, 107, 114, 116, (yy_state_t)~0, 116, 22, 134, (yy_state_t)~0, 99, 99, (yy_state_t)~0,
 98, 159, 98, 22, 99, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 107,
 114, (yy_state_t)~0, 116, (yy_state_t)~0, (yy_state_t)~0, 107, 114, (yy_state_t)~0, 116, 21, 21, 21, 21, 21, 21, 21,
 21, 21, 21, 135, (yy_state_t)~0, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 196,
 (yy_state_t)~0, 146, 116, 148, 196, 21, 147, 146, 116, 148, 135, 146, 147, 148, 21, (yy_state_t)~0,
 147, 21, (yy_state_t)~0, 130, 130, 130, 130, 130, 130, 130, 130, 195, (yy_state_t)~0, 19, (yy_state_t)~0, 18,
 195, 146, 19, 148, 18, 21, 147, 146, (yy_state_t)~0, 148, 135, 146, 147, 148, 21, 130,
 147, 21, (yy_state_t)~0, (yy_state_t)~0, 202, 206, 210, 201, 130, 202, 206, 210, 201, 129, (yy_state_t)~0, 129,
 129, 129, 129, 129, 129, 129, 129, 129, 129, 199, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 199, 130,
 129, 129, 129, 129, 129, 129, (yy_state_t)~0, (yy_state_t)~0, 130, 145, 145, 145, 145, 145, 145, 145,
 145, 145, 145, 200, 17, 18, (yy_state_t)~0, (yy_state_t)~0, 200, 17, 145, 145, 145, 145, 145, 145,
 129, 129, 129, 129, 129, 129, 149, 153, 149, 153, 201, 149, 149, 149, 149, 149,
 149, 149, 149, 149, 149, 144, (yy_state_t)~0, 206, (yy_state_t)~0, (yy_state_t)~0, 145, 145, 145, 145, 145, 145,
 199, (yy_state_t)~0, 153, (yy_state_t)~0, 165, (yy_state_t)~0, 165, (yy_state_t)~0, 153, 165, 165, 165, 165, 165, 165, 165,
 165, 165, 165, 144, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 144, (yy_state_t)~0, 169, 208, 169, 144, 200, 207, 208,
 211, 17, 153, 207, 174, 211, 174, (yy_state_t)~0, 153, 174, 174, 174, 174, 174, 174, 174,
 174, 174, 174, 144, 169, (yy_state_t)~0, 204, 144, (yy_state_t)~0, (yy_state_t)~0, 169, 204, 144, 161, 161, 161,
 161, 161, 161, 161, 161, 161, 161, 178, (yy_state_t)~0, 178, (yy_state_t)~0, 182, (yy_state_t)~0, 182, 161, 161,
 161, 161, 161, 161, 169, 164, 173, (yy_state_t)~0, (yy_state_t)~0, 161, 169, 164, 173, 161, (yy_state_t)~0, 164,
 173, 172, 178, 163, 208, 207, 182, 172, 178, 163, (yy_state_t)~0, 172, 182, 163, 161, 161,
 161, 161, 161, 161, 162, 164, 173, (yy_state_t)~0, 204, 161, 162, 164, 173, 161, 162, 164,
 173, 172, 178, 163, (yy_state_t)~0, 205, 182, 172, 178, 163, 205, 172, 182, 163, 219, (yy_state_t)~0,
 221, 15, (yy_state_t)~0, 219, 162, 221, 15, 16, (yy_state_t)~0, (yy_state_t)~0, 162, 160, 16, 160, 162, (yy_state_t)~0,
 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 20, 227, 235, (yy_state_t)~0, 240, 20,
 227, 235, 232, 240, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 232, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 203, 209, 205, (yy_state_t)~0, (yy_state_t)~0, 203, 209, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 16, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 20, 15, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 212, 232, 214, 209, (yy_state_t)~0, 212, 203, 214, 215, 203, 216, 217, 213,
 215, 218, 216, 217, 213, 220, 218, 222, 223, 14, 220, 224, 222, 223, 14, 225,
 224, 231, 226, 233, 225, (yy_state_t)~0, 231, 226, 233, 234, 230, 237, 238, 239, 234, 230,
 237, 238, 239, 236, 241, 242, 243, 229, 236, 241, 242, 243, 229, 245, 246, 247,
 248, 244, 245, 246, 247, 248, 244, (yy_state_t)~0, 250, 249, 212, (yy_state_t)~0, 214, 250, 249, (yy_state_t)~0,
 215, 217, 251, 218, 212, 228, (yy_state_t)~0, 251, (yy_state_t)~0, 216, 228, 223, 213, 224, 252, 14,
 14, 220, 225, 252, 233, 222, 226, 253, 231, 230, (yy_state_t)~0, 14, 253, 238, 14, 234,
 254, (yy_state_t)~0, 13, 255, 258, 254, 242, 13, 255, 258, 230, 241, 229, 259, 237, 239,
 245, 261, 259, 247, 260, 236, 261, (yy_state_t)~0, (yy_state_t)~0, 260, 250, 246, 249, 244, 257, 229,
 263, 262, 264, 257, 265, 263, 262, 264, 266, 265, 267, 256, 268, 266, (yy_state_t)~0, 267,
 256, 268, 228, 270, 269, 271, 272, 12, 270, 269, 271, 272, 12, 274, 252, 276,
 (yy_state_t)~0, 273, 274, (yy_state_t)~0, 276, 13, 273, 11, 255, 253, 278, 277, 11, 279, 281, 278,
 277, 280, 279, 281, 255, 255, 280, 258, (yy_state_t)~0, 275, 10, (yy_state_t)~0, 282, 259, 275, 10,
 260, 282, (yy_state_t)~0, 264, 283, 284, 9, 263, 286, 283, 284, 9, (yy_state_t)~0, 286, 287, 285,
 257, 262, 256, 287, 285, 288, 265, 269, 289, (yy_state_t)~0, 288, 267, 290, 289, 268, (yy_state_t)~0,
 (yy_state_t)~0, 290, 272, 270, 12, 8, 273, 293, 294, 276, 8, 11, 293, 294, (yy_state_t)~0, (yy_state_t)~0,
 295, 276, 277, 11, 280, 295, 296, 297, 292, 279, 298, 296, 297, 292, 299, 298,
 291, 300, (yy_state_t)~0, 299, 301, 291, 300, 10, 303, 301, 7, (yy_state_t)~0, (yy_state_t)~0, 303, 282, 7,
 9, 283, 304, 9, 288, 305, 306, 304, 286, 307, 305, 306, 285, 302, 307, 308,
 309, 310, 302, 311, 308, 309, 310, 312, 311, 6, 289, 294, 312, 315, 6, 8,
 316, 8, 315, 318, (yy_state_t)~0, 316, (yy_state_t)~0, 319, 318, 293, 320, 8, 319, (yy_state_t)~0, 322, 320,
 295, 321, 296, 322, 300, 298, 321, 317, (yy_state_t)~0, 323, 314, 292, 317, 7, 323, 314,
 324, 291, 304, 325, (yy_state_t)~0, 324, (yy_state_t)~0, 7, 325, 306, (yy_state_t)~0, 303, (yy_state_t)~0, 313, 308, 305,
 326, 302, 313, (yy_state_t)~0, 327, 326, (yy_state_t)~0, 5, 6, 327, (yy_state_t)~0, 310, 5, 328, (yy_state_t)~0, 6,
 (yy_state_t)~0, (yy_state_t)~0, 328, 309, (yy_state_t)~0, 311, 6, 329, 330, 315, 318, 331, 329, 330, (yy_state_t)~0, (yy_state_t)~0,
 331, 316, 316, 319, 321, 4, 335, 336, (yy_state_t)~0, 314, 4, 335, 336, 320, 337, 338,
 339, 340, 341, 337, 338, 339, 340, 341, 342, 317, 343, (yy_state_t)~0, 346, 342, (yy_state_t)~0, 343,
 324, 346, 334, 326, 344, 4, 4, 334, (yy_state_t)~0, 344, 345, (yy_state_t)~0, 4, 347, 313, 345,
 328, (yy_state_t)~0, 347, 348, 349, 350, 329, 5, 348, 349, 350, 351, (yy_state_t)~0, (yy_state_t)~0, 352, 353,
 351, 330, 4, 352, 353, 335, 354, 333, 355, 356, (yy_state_t)~0, 354, 333, 355, 356, 357,
 (yy_state_t)~0, 340, (yy_state_t)~0, 359, 357, 358, 360, 339, 359, 336, 358, 360, (yy_state_t)~0, 343, 332, 338,
 337, 344, (yy_state_t)~0, 332, 361, 341, 362, 345, (yy_state_t)~0, 361, 342, 362, 347, 334, 363, 3,
 365, 364, 366, 363, 3, 365, 364, 366, 348, 1, 351, 349, (yy_state_t)~0, (yy_state_t)~0, 1, (yy_state_t)~0,
 (yy_state_t)~0, 350, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 1, (yy_state_t)~0, 352, (yy_state_t)~0,
 (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 355, 333, (yy_state_t)~0, 353, 356, 358, 357, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0,
 (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 359, (yy_state_t)~0, 332, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0,
 362, 361, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, (yy_state_t)~0, 365, (yy_state_t)~0, (yy_state_t)~0,
 (yy_state_t)~0, (yy_state_t)~0, 3, 364, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, (yy_state_t)~0, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, (yy_state_t)~0, 369,
 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
 369, 369, 369, 369, 0
};

static yy_state_t yy_default[] = {
 372, 372, 372, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 372, 22, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 25, 372, 25, 24,
 372, 372, 372, 372, 372, 372, 372, 82, 82, 372, 372, 372, 90, 22, 95, 372,
 97, 372, 372, 372, 99, 372, 372, 372, 372, 372, 101, 101, 372, 372, 372, 372,
 372, 108, 108, 98, 98, 372, 372, 372, 372, 97, 372, 372, 97, 372, 372, 372,
 372, 372, 135, 132, 372, 134, 372, 372, 134, 372, 372, 134, 372, 372, 372, 372,
 129, 372, 145, 145, 145, 372, 372, 372, 149, 149, 372, 372, 157, 372, 159, 372,
 372, 372, 161, 161, 161, 372, 372, 372, 165, 165, 372, 372, 161, 161, 372, 372,
 372, 174, 174, 372, 372, 160, 160, 372, 372, 372, 372, 159, 372, 372, 159, 372,
 372, 372, 372, 20, 20, 23, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2,
 372, 372, 372, 369, 0
};

static short yy_base[] = {
 0, 1887, 2004, 1885, 1779, 1749, 1687, 1656, 1619, 1588, 1576, 1557, 1541, 1488, 1399, 1263,
 1269, 1074, 1005, 1003, 1288, 937, 846, 508, 117, 184, 80, 101, 96, 92, 75, 73,
 95, 71, 70, 69, 68, 2260, 2260, 2260, 2260, 66, 2260, 2260, 2260, 2260, 2260, 2260,
 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260,
 2260, 2260, 2260, 79, 2260, 2260, 2260, 2260, 82, 2260, 2260, 312, 2260, 2260, 2260, 394,
 98, 2260, 398, 2260, 2260, 2260, 2260, 102, 399, 764, 636, 2260, 2260, 2260, 2260, 384,
 380, 381, 917, 856, 389, 428, 2260, 2260, 2260, 2260, 103, 873, 885, 2260, 2260, 2260,
 2260, 106, 874, 107, 908, 2260, 2260, 2260, 2260, 79, 2260, 2260, 82, 56, 84, 2260,
 2260, 1023, 979, 2260, 386, 385, 838, 949, 99, 2260, 2260, 100, 70, 101, 2260, 2260,
 1095, 1049, 939, 944, 941, 1083, 2260, 2260, 136, 1084, 2260, 2260, 2260, 392, 391, 844,
 1264, 1165, 1198, 1181, 1167, 1113, 2260, 2260, 137, 1134, 2260, 2260, 1179, 1168, 1145, 2260,
 2260, 429, 1180, 2260, 2260, 444, 1184, 2260, 2260, 2260, 2260, 107, 2260, 2260, 246, 378,
 369, 2260, 2260, 1001, 973, 2260, 2260, 1047, 1073, 1029, 1026, 1312, 1172, 1251, 1027, 1148,
 1144, 1313, 1028, 1150, 1377, 1389, 1379, 1385, 1387, 1388, 1391, 1260, 1395, 1262, 1397, 1398,
 1401, 1405, 1408, 1289, 1459, 1429, 1416, 1407, 1296, 1409, 1415, 1290, 1425, 1417, 1418, 1419,
 1292, 1426, 1427, 1428, 1439, 1435, 1436, 1437, 1438, 1447, 1446, 1456, 1468, 1477, 1486, 1489,
 1529, 1516, 1490, 1499, 1506, 1503, 1519, 1518, 1520, 1522, 1526, 1528, 1530, 1538, 1537, 1539,
 1540, 1551, 1547, 1575, 1549, 1561, 1560, 1563, 1567, 1564, 1578, 1586, 1587, 1597, 1590, 1596,
 1603, 1606, 1610, 1646, 1638, 1621, 1622, 1630, 1636, 1637, 1640, 1644, 1647, 1650, 1675, 1654,
 1664, 1667, 1668, 1671, 1677, 1678, 1679, 1681, 1685, 1739, 1720, 1691, 1694, 1717, 1697, 1701,
 1704, 1711, 1708, 1719, 1726, 1729, 1742, 1746, 1755, 1765, 1766, 1769, 1868, 1845, 1808, 1780,
 1781, 1788, 1789, 1790, 1791, 1792, 1798, 1800, 1810, 1816, 1802, 1819, 1825, 1826, 1827, 1833,
 1836, 1837, 1844, 1846, 1847, 1853, 1859, 1857, 1860, 1874, 1876, 1884, 1887, 1886, 1888, 2260,
 2260, 2132, 2260, 2260, 2260
};


#line 156 "C:/Program Files/Mortice Kern Systems/Lex and Yacc/etc/yylex.cpp"

// MKS LEX prototype scanner code
// Copyright 1991 by Mortice Kern Systems Inc.
// All rights reserved.

// You can redefine YY_INTERACTIVE to be 0 to get a very slightly
// faster scanner:
#ifndef YY_INTERACTIVE
#define	YY_INTERACTIVE	1
#endif

// You can compile with -DYY_DEBUG to get a print trace of the scanner
#ifdef YY_DEBUG
#undef YY_DEBUG
#define YY_DEBUG(fmt,a1,a2)	fprintf(stderr,fmt,a1,a2)
#else
#define YY_DEBUG(fmt,a1,a2)
#endif

#define MIN_NUM_STATES 20

// Do *NOT* redefine the following:
#define	BEGIN		yy_start =
#define	REJECT		goto yy_reject
#define	yymore()	goto yy_more

#line 1 "cgrammer.l"

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include "lex_yy.hpp"
#include "ytab.hpp"

#include "myScanner.h"

extern myScanner *scanner;

extern  YYSTYPE  yylval;

using namespace std;

/* wrapper functions for myScanner methods */
void count(void);
void comment(void);
UINT32 check_type(void);
void PrintToken(UINT32 token);
/*
symbl *Install(char *plexeme,  UINT32 token);
*/
YYSTYPE Install(char *plexeme,  UINT32 token);


#line 182 "C:/Program Files/Mortice Kern Systems/Lex and Yacc/etc/yylex.cpp"


// Constructor for yy_scan. Set up tables
yy_scan::yy_scan(int sz, char* buf, char* sv, yy_state_t* states)
{
	mustfree = 0;
	if ((size = sz) < MIN_NUM_STATES
	  || (yytext = buf) == 0
	  || (state = states) == 0) {
		yyerror("Bad space for scanner!");
		exit(1);
	}
#ifdef YY_PRESERVE
	save = sv;
#endif
}
// Constructor for yy_scan. Set up tables
yy_scan::yy_scan(int sz)
{
	size = sz;
	yytext = new char[sz+1];	// text buffer
	state = new yy_state_t[sz+1];	// state buffer
#ifdef YY_PRESERVE
	save = new char[sz];	// saved yytext[]
	push = save + sz;
#endif
	if (yytext == NULL
#ifdef YY_PRESERVE
	  || save == NULL
#endif
	  || state == NULL) {
		yyerror("No space for scanner!");
		exit(1);
	}
	mustfree = 1;
	yy_end = 0;
	yy_start = 0;
	yy_lastc = YYNEWLINE;
	yyin = stdin;
	yyout = stdout;
	yylineno = 1;
	yyleng = 0;
}

// Descructor for yy_scan
yy_scan::~yy_scan()
{
	if (mustfree) {
		mustfree = 0;
		delete(yytext);
		delete(state);
#ifdef YY_PRESERVE
		delete(save);
#endif
	}
}

// Print error message, showing current line number
void
yy_scan::yyerror(char *fmt, ...)
{
	va_list va;

	va_start(va, fmt);
#ifdef LEX_WINDOWS
	// Windows has no concept of a standard error output!
	// send output to yyout as a simple solution
	if (yylineno)
		fprintf(yyout, "%d: ", yylineno);
	(void) vfprintf(yyout, fmt, va);
	fputc('\n', yyout);
#else /* LEX_WINDOWS */
	if (yylineno)
		fprintf(stderr, "%d: ", yylineno);
	(void) vfprintf(stderr, fmt, va);
	fputc('\n', stderr);
#endif /* LEX_WINDOWS */
	va_end(va);
}


#ifdef LEX_WINDOWS

// The initial portion of the lex scanner
// In an windows environment, it will load the desired
// resources, obtain pointers to them, and then call
// the protected member win_yylex() to acutally begin the
// scanning. When complete, win_yylex() will return a
// value back to our new yylex() function, which will 
// record that value temporarily, release the resources
// from global memory, and finally return the value
// back to the caller of yylex().

int
yy_scan::yylex()
{
	int wReturnValue;
	HGLOBAL hRes_table;
	unsigned short far *old_yy_la_act;	// remember old pointer values
	short far *old_yy_final;
	yy_state_t far *old_yy_begin;
	yy_state_t far *old_yy_next;
	yy_state_t far *old_yy_check;
	yy_state_t far *old_yy_default;
	short far *old_yy_base;

	// the following code will load the required
	// resources for a Windows based parser. 

	hRes_table = LoadResource (hInst,
		FindResource (hInst, "UD_RES_yyLEX", "yyLEXTBL"));
	
	// return an error code if any
	// of the resources did not load 

	if (hRes_table == (HGLOBAL)NULL) 
		return (0);
	
	// the following code will lock the resources
	// into fixed memory locations for the scanner
	// (remember previous pointer locations)

	old_yy_la_act = yy_la_act;
	old_yy_final = yy_final;
	old_yy_begin = yy_begin;
	old_yy_next = yy_next;
	old_yy_check = yy_check;
	old_yy_default = yy_default;
	old_yy_base = yy_base;

	yy_la_act = (unsigned short far *)LockResource (hRes_table);
	yy_final = (short far *)(yy_la_act + Sizeof_yy_la_act);
	yy_begin = (yy_state_t far *)(yy_final + Sizeof_yy_final);
	yy_next = (yy_state_t far *)(yy_begin + Sizeof_yy_begin);
	yy_check = (yy_state_t far *)(yy_next + Sizeof_yy_next);
	yy_default = (yy_state_t far *)(yy_check + Sizeof_yy_check);
	yy_base = (short far *)(yy_default + Sizeof_yy_default);


	// call the standard yylex() code

	wReturnValue = win_yylex();

	// unlock the resources

	UnlockResource (hRes_table);

	// and now free the resource

	FreeResource (hRes_table);

	//
	// restore previously saved pointers
	//

	yy_la_act = old_yy_la_act;
	yy_final = old_yy_final;
	yy_begin = old_yy_begin;
	yy_next = old_yy_next;
	yy_check = old_yy_check;
	yy_default = old_yy_default;
	yy_base = old_yy_base;
	return (wReturnValue);
}	// end yylex()

// The actual lex scanner
// yy_sbuf[0:yyleng-1] contains the states corresponding to yytext.
// yytext[0:yyleng-1] contains the current token.
// yytext[yyleng:yy_end-1] contains pushed-back characters.
// When the user action routine is active,
// save contains yytext[yyleng], which is set to '\0'.
// Things are different when YY_PRESERVE is defined. 

int 
yy_scan::win_yylex()

#else /* LEX_WINDOWS */

// The actual lex scanner
// yy_sbuf[0:yyleng-1] contains the states corresponding to yytext.
// yytext[0:yyleng-1] contains the current token.
// yytext[yyleng:yy_end-1] contains pushed-back characters.
// When the user action routine is active,
// save contains yytext[yyleng], which is set to '\0'.
// Things are different when YY_PRESERVE is defined. 
int
yy_scan::yylex()
#endif /* LEX_WINDOWS */

{
	int c, i, yybase;
	unsigned  yyst;		/* state */
	int yyfmin, yyfmax;	/* yy_la_act indices of final states */
	int yyoldi, yyoleng;	/* base i, yyleng before look-ahead */
	int yyeof;		/* 1 if eof has already been read */

#line 377 "C:/Program Files/Mortice Kern Systems/Lex and Yacc/etc/yylex.cpp"


#ifdef YYEXIT
	yyLexFatal = 0;
#endif
	yyeof = 0;
	i = yyleng;
	YY_SCANNER();

  yy_again:
	if ((yyleng = i) > 0) {
		yy_lastc = yytext[i-1];	// determine previous char
		while (i > 0)	//	// scan previously token
			if (yytext[--i] == YYNEWLINE)	// fix yylineno
				yylineno++;
	}
	yy_end -= yyleng;		// adjust pushback
	if (yy_end > 0)
		memmove(yytext, yytext+yyleng, (size_t) yy_end);
	i = 0;

  yy_contin:
	yyoldi = i;

	/* run the state machine until it jams */
	yyst = yy_begin[yy_start + ((yy_lastc == YYNEWLINE) ? 1 : 0)];
	state[i] = (yy_state_t) yyst;
	do {
		YY_DEBUG("<state %d, i = %d>\n", yyst, i);
		if (i >= size) {
			YY_FATAL("Token buffer overflow");
#ifdef YYEXIT
			if (yyLexFatal)
				return -2;
#endif
		}	/* endif */

		/* get input char */
		if (i < yy_end)
			c = yytext[i];		/* get pushback char */
		else if (!yyeof && (c = yygetc()) != EOF) {
			yy_end = i+1;
			yytext[i] = c;
		} else /* c == EOF */ {
			c = EOF;		/* just to make sure... */
			if (i == yyoldi) {	/* no token */
				yyeof = 0;
				if (yywrap())
					return 0;
				else
					goto yy_again;
			} else {
				yyeof = 1;	/* don't re-read EOF */
				break;
			}
		}
		YY_DEBUG("<input %d = 0x%02x>\n", c, c);

		/* look up next state */
		while ((yybase = yy_base[yyst]+(unsigned char)c) > yy_nxtmax
		    || yy_check[yybase] != (yy_state_t) yyst) {
			if (yyst == yy_endst)
				goto yy_jammed;
			yyst = yy_default[yyst];
		}
		yyst = yy_next[yybase];
	  yy_jammed: ;
	     state[++i] = (yy_state_t) yyst;
	} while (!(yyst == yy_endst || YY_INTERACTIVE &&
		yy_base[yyst] > yy_nxtmax && yy_default[yyst] == yy_endst));

	YY_DEBUG("<stopped %d, i = %d>\n", yyst, i);
	if (yyst != yy_endst)
		++i;

  yy_search:
	/* search backward for a final state */
	while (--i > yyoldi) {
		yyst = state[i];
		if ((yyfmin = yy_final[yyst]) < (yyfmax = yy_final[yyst+1]))
			goto yy_found;	/* found final state(s) */
	}
	/* no match, default action */
	i = yyoldi + 1;
	output(yytext[yyoldi]);
	goto yy_again;

  yy_found:
	YY_DEBUG("<final state %d, i = %d>\n", yyst, i);
	yyoleng = i;		/* save length for REJECT */
	
	// pushback look-ahead RHS, handling trailing context
	if ((c = (int)(yy_la_act[yyfmin]>>9) - 1) >= 0) {
		unsigned char *bv = yy_look + c*YY_LA_SIZE;
		static unsigned char bits [8] = {
			1<<0, 1<<1, 1<<2, 1<<3, 1<<4, 1<<5, 1<<6, 1<<7
		};
		while (1) {
			if (--i < yyoldi) {	/* no / */
				i = yyoleng;
				break;
			}
			yyst = state[i];
			if (bv[(unsigned)yyst/8] & bits[(unsigned)yyst%8])
				break;
		}
	}

	/* perform action */
	yyleng = i;
	YY_USER();
	switch (yy_la_act[yyfmin] & 0777) {
	case 0:
#line 41 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		comment(); 
	}
	break;
	case 1:
#line 46 "cgrammer.l"
	{ /* consume //-comment */ 
		fputs(yytext,yyout);
	}
	break;
	case 2:
#line 50 "cgrammer.l"
	{ /* consume //-comment */ 
		fputs(yytext,yyout);
	}
	break;
	case 3:
#line 55 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		yylval = Install(yytext,AUTO);
		PrintToken(AUTO);
		return(AUTO); 
	}
	break;
	case 4:
#line 61 "cgrammer.l"
	{ 		
		fputs(yytext,yyout);
		yylval = Install(yytext,BOOL);
		PrintToken(BOOL);
		return(BOOL); 
	}
	break;
	case 5:
#line 67 "cgrammer.l"
	{
 		fputs(yytext,yyout);
		yylval = Install(yytext,BREAK);
		PrintToken(BREAK);
		return(BREAK); 
	}
	break;
	case 6:
#line 73 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		yylval = Install(yytext,CASE);
		PrintToken(CASE);
		return(CASE); 
	}
	break;
	case 7:
#line 79 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		yylval = Install(yytext,CHAR);
		PrintToken(CHAR);
		return(CHAR); 
	}
	break;
	case 8:
#line 85 "cgrammer.l"
	{
 		fputs(yytext,yyout);
		yylval = Install(yytext,COMPLEX);
		PrintToken(COMPLEX);
		return(COMPLEX); 
	}
	break;
	case 9:
#line 91 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,CONST);
		PrintToken(CONST);
		return(CONST); 
	}
	break;
	case 10:
#line 97 "cgrammer.l"
	{  	
		fputs(yytext,yyout);
		yylval = Install(yytext,CONTINUE);
		PrintToken(CONTINUE);
		return(CONTINUE); 
	}
	break;
	case 11:
#line 103 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,DEFAULT);
		PrintToken(DEFAULT);
		return(DEFAULT); 
	}
	break;
	case 12:
#line 109 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,DO);
		PrintToken(DO);
		return(DO); 
	}
	break;
	case 13:
#line 115 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,DOUBLE);
		PrintToken(DOUBLE);
		return(DOUBLE); 
	}
	break;
	case 14:
#line 121 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,ELSE);
		PrintToken(ELSE);
		return(ELSE); 
	}
	break;
	case 15:
#line 127 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,ENUM);
		PrintToken(ENUM);
		return(ENUM); 
	}
	break;
	case 16:
#line 133 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,EXTERN);
		PrintToken(EXTERN);
		return(EXTERN); 
	}
	break;
	case 17:
#line 139 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,FLOAT);
		PrintToken(FLOAT);
		return(FLOAT); 
	}
	break;
	case 18:
#line 145 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,FOR);
		PrintToken(FOR);
		return(FOR); 
	}
	break;
	case 19:
#line 151 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,GOTO);
		PrintToken(GOTO);
		return(GOTO); 
	}
	break;
	case 20:
#line 157 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,IF);
		PrintToken(IF);
		return(IF); 
	}
	break;
	case 21:
#line 163 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,IMAGINARY);
		PrintToken(IMAGINARY);
		return(IMAGINARY); 
	}
	break;
	case 22:
#line 169 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,INLINE);
		PrintToken(INLINE);
		return(INLINE); 
	}
	break;
	case 23:
#line 175 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,INT);
		PrintToken(INT);
		return(INT); 
	}
	break;
	case 24:
#line 181 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,LONG);
		PrintToken(LONG);
		return(LONG); 
	}
	break;
	case 25:
#line 187 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,REGISTER);
		PrintToken(REGISTER);
		return(REGISTER); 
	}
	break;
	case 26:
#line 193 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,RESTRICT);
		PrintToken(RESTRICT);
		return(RESTRICT); 
	}
	break;
	case 27:
#line 199 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,RETURN);
		PrintToken(RETURN);
		return(RETURN); 
	}
	break;
	case 28:
#line 205 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,SHORT);
		PrintToken(SHORT);
		return(SHORT); }
	break;
	case 29:
#line 210 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,SIGNED);
		PrintToken(SIGNED);
		return(SIGNED); 
	}
	break;
	case 30:
#line 216 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,SIZEOF);
		PrintToken(SIZEOF);
		return(SIZEOF); 
	}
	break;
	case 31:
#line 222 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,STATIC);
		PrintToken(STATIC);
		return(STATIC); 
	}
	break;
	case 32:
#line 228 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,STRUCT);
		PrintToken(STRUCT);
		return(STRUCT); 
	}
	break;
	case 33:
#line 234 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,SWITCH);
		PrintToken(SWITCH);
		return(SWITCH); 
	}
	break;
	case 34:
#line 240 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,TYPEDEF);
		PrintToken(TYPEDEF);
		return(TYPEDEF); 
	}
	break;
	case 35:
#line 246 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,UNION);
		PrintToken(UNION);
		return(UNION); 
	}
	break;
	case 36:
#line 252 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,UNSIGNED);
		PrintToken(UNSIGNED);
		return(UNSIGNED); 
	}
	break;
	case 37:
#line 258 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		yylval = Install(yytext,VOID);
		PrintToken(VOID);
		return(VOID); 
	}
	break;
	case 38:
#line 264 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,VOLATILE);
		PrintToken(VOLATILE);
		return(VOLATILE); 
	}
	break;
	case 39:
#line 270 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,WHILE);
		PrintToken(WHILE);
		return(WHILE); 
	}
	break;
	case 40:
#line 277 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,WHILE);
		PrintToken(ATTRIBUTE);
		return(ATTRIBUTE); 
	}
	break;
	case 41:
#line 284 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,IDENTIFIER);
		PrintToken(IDENTIFIER);
		return(check_type());  
		/* return(IDENTIFIER); */ 
	}
	break;
	case 42:
#line 292 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 43:
#line 298 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 44:
#line 304 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 45:
#line 310 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 46:
#line 317 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 47:
#line 323 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 48:
#line 329 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 49:
#line 335 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 50:
#line 341 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 51:
#line 347 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,CONSTANT);
		PrintToken(CONSTANT);
		return(CONSTANT); 
	}
	break;
	case 52:
#line 355 "cgrammer.l"
	{  
		fputs(yytext,yyout);
		yylval = Install(yytext,STRING_LITERAL);
		PrintToken(STRING_LITERAL);
		return(STRING_LITERAL); 
	}
	break;
	case 53:
#line 362 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,ELLIPSIS);
		PrintToken(ELLIPSIS);
		return(ELLIPSIS); 
	}
	break;
	case 54:
#line 368 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,RIGHT_ASSIGN);
		PrintToken(RIGHT_ASSIGN);
		return(RIGHT_ASSIGN); 
	}
	break;
	case 55:
#line 374 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,LEFT_ASSIGN);
		PrintToken(LEFT_ASSIGN);
		return(LEFT_ASSIGN); 
	}
	break;
	case 56:
#line 380 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,ADD_ASSIGN);
		PrintToken(ADD_ASSIGN);
		return(ADD_ASSIGN); 
	}
	break;
	case 57:
#line 386 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,SUB_ASSIGN);
		PrintToken(SUB_ASSIGN);
		return(SUB_ASSIGN); 
	}
	break;
	case 58:
#line 392 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,MUL_ASSIGN);
		PrintToken(MUL_ASSIGN);
		return(MUL_ASSIGN); 
	}
	break;
	case 59:
#line 398 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,DIV_ASSIGN);
		PrintToken(DIV_ASSIGN);
		return(DIV_ASSIGN); 
	}
	break;
	case 60:
#line 404 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,MOD_ASSIGN);
		PrintToken(MOD_ASSIGN);
		return(MOD_ASSIGN); 
	}
	break;
	case 61:
#line 410 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,AND_ASSIGN);
		PrintToken(AND_ASSIGN);
		return(AND_ASSIGN); 
	}
	break;
	case 62:
#line 416 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,XOR_ASSIGN);
		PrintToken(XOR_ASSIGN);
		return(XOR_ASSIGN); 
	}
	break;
	case 63:
#line 422 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,OR_ASSIGN);
		PrintToken(OR_ASSIGN);
		return(OR_ASSIGN); 
	}
	break;
	case 64:
#line 428 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,RIGHT_OP);
		PrintToken(RIGHT_OP);
		return(RIGHT_OP); 
	}
	break;
	case 65:
#line 434 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,LEFT_OP);
		PrintToken(LEFT_OP);
		return(LEFT_OP); }
	break;
	case 66:
#line 439 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,INC_OP);
		PrintToken(INC_OP);
		return(INC_OP); 
	}
	break;
	case 67:
#line 445 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,DEC_OP);
		PrintToken(DEC_OP);
		return(DEC_OP);
	}
	break;
	case 68:
#line 451 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,PTR_OP);
		PrintToken(PTR_OP);
		return(PTR_OP); 
	}
	break;
	case 69:
#line 457 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,AND_OP);
		PrintToken(AND_OP);
		return(AND_OP); 
	}
	break;
	case 70:
#line 463 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,OR_OP);
		PrintToken(OR_OP);
		return(OR_OP); 
	}
	break;
	case 71:
#line 469 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,LE_OP);
		PrintToken(LE_OP);
		return(LE_OP); 
	}
	break;
	case 72:
#line 475 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,GE_OP);
		PrintToken(GE_OP);
		return(GE_OP); 
	}
	break;
	case 73:
#line 481 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,EQ_OP);
		PrintToken(EQ_OP);
		return(EQ_OP); 
	}
	break;
	case 74:
#line 487 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,NE_OP);
		PrintToken(NE_OP);
		return(NE_OP); 
	}
	break;
	case 75:
#line 493 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,';');
		PrintToken(';');
		return(';'); 
	}
	break;
	case 76:
#line 499 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,'{');
		PrintToken('{');
		return('{'); 
	}
	break;
	case 77:
#line 505 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'}');
		PrintToken('}');
		return('}'); 
	}
	break;
	case 78:
#line 511 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,',');
		PrintToken(',');
		return(','); 
	}
	break;
	case 79:
#line 517 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,':');
		PrintToken(':');
		return(':'); 
	}
	break;
	case 80:
#line 523 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'=');
		PrintToken('=');
		return('='); 
	}
	break;
	case 81:
#line 529 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		yylval = Install(yytext,'(');
		PrintToken('(');
		return('('); 
	}
	break;
	case 82:
#line 535 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,COMPLEX);
		PrintToken(COMPLEX);
		return(')'); 
	}
	break;
	case 83:
#line 541 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,'[');
		PrintToken('[');
		return('['); 
	}
	break;
	case 84:
#line 547 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,']');
		PrintToken(']');
		return(']'); 
	}
	break;
	case 85:
#line 553 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'.');
		PrintToken('.');
		return('.'); 
	}
	break;
	case 86:
#line 559 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'&');
		PrintToken('&');
		return('&'); 
	}
	break;
	case 87:
#line 565 "cgrammer.l"
	{
 		fputs(yytext,yyout);
		yylval = Install(yytext,'!');
		PrintToken('!');
		return('!'); 
	}
	break;
	case 88:
#line 571 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		yylval = Install(yytext,'~');
		PrintToken('~');
		return('~'); 
	}
	break;
	case 89:
#line 577 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'-');
		PrintToken('-');
		return('-'); 
	}
	break;
	case 90:
#line 583 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'+');
		PrintToken('+');
		return('+'); 
	}
	break;
	case 91:
#line 589 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'*');
		PrintToken('*');
		return('*'); 
	}
	break;
	case 92:
#line 595 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,'/');
		PrintToken('/');
		return('/'); 
	}
	break;
	case 93:
#line 601 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'%');
		PrintToken('%');
		return('%'); 
	}
	break;
	case 94:
#line 607 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'<');
		PrintToken('<');
		return('<'); 
	}
	break;
	case 95:
#line 613 "cgrammer.l"
	{
  		fputs(yytext,yyout);
		yylval = Install(yytext,'>');
		PrintToken('>');
		return('>'); 
	}
	break;
	case 96:
#line 619 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'^');
		PrintToken('^');
		return('^'); 
	}
	break;
	case 97:
#line 625 "cgrammer.l"
	{ 
		fputs(yytext,yyout);
		yylval = Install(yytext,'|');
		PrintToken('|');
		return('|'); 
	}
	break;
	case 98:
#line 631 "cgrammer.l"
	{ 
 		fputs(yytext,yyout);
		yylval = Install(yytext,'?');
		PrintToken('?');
		return('?'); 
	}
	break;
	case 99:
#line 638 "cgrammer.l"
	{
  		fputs(yytext,yyout);
//		yylval = Install(yytext,COMPLEX);
//		PrintToken(COMPLEX);
	}
	break;
	case 100:
#line 643 "cgrammer.l"
	{ /* Add code to complain about unmatched characters */ }
	break;

#line 489 "C:/Program Files/Mortice Kern Systems/Lex and Yacc/etc/yylex.cpp"

	}
	YY_SCANNER();
	i = yyleng;
	goto yy_again;			/* action fell though */

  yy_reject:
	YY_SCANNER();
	i = yyoleng;			/* restore original yytext */
	if (++yyfmin < yyfmax)
		goto yy_found;		/* another final state, same length */
	else
		goto yy_search;		/* try shorter yytext */

  yy_more:
	YY_SCANNER();
	i = yyleng;
	if (i > 0)
		yy_lastc = yytext[i-1];
	goto yy_contin;
}

/*
 * user callable input/unput functions.
 */
void
yy_scan::yy_reset()
{
	YY_INIT();
	yylineno = 1;
}
/* get input char with pushback */
int
yy_scan::input()
{
	int c;
#ifndef YY_PRESERVE
	if (yy_end > yyleng) {
		yy_end--;
		memmove(yytext+yyleng, yytext+yyleng+1,
			(size_t) (yy_end-yyleng));
		c = save;
		YY_USER();
#else
	if (push < save+size) {
		c = *push++;
#endif
	} else
		c = yygetc();
	yy_lastc = c;
	if (c == YYNEWLINE)
		yylineno++;
	return c;
}

/* pushback char */
int
yy_scan::unput(int c)
{
#ifndef YY_PRESERVE
	if (yy_end >= size) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		if (yy_end > yyleng) {
			yytext[yyleng] = save;
			memmove(yytext+yyleng+1, yytext+yyleng,
				(size_t) (yy_end-yyleng));
			yytext[yyleng] = 0;
		}
		yy_end++;
		save = c;
#else
	if (push <= save) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		*--push = c;
#endif
		if (c == YYNEWLINE)
			yylineno--;
	}	/* endif */
	return c;
}

#line 646 "cgrammer.l"


void comment(void) {

	scanner->comment();
}


void count(void) {

	scanner->count();
}


UINT32 check_type(void) {

	return scanner->check_type();
}



//
// install a lexeme in the symbol table
//
/*
symbl *Install(char *plexeme,  UINT32 token) {	

if (token == TYPEDEF) {
	symbl *sym = scanner->Install(plexeme,token);
	return sym;
}

	return scanner->Install(plexeme,token);
}
*/
YYSTYPE Install(char *plexeme,  UINT32 token) {	

if (token == TYPEDEF) {
	symbl *sym = scanner->Install(plexeme,token);
	return (YYSTYPE)sym;
}

	return (YYSTYPE)scanner->Install(plexeme,token);
}


void PrintToken(UINT32 token) {

	scanner->PrintToken(token);
}






